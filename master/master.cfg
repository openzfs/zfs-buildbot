# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from twisted.python import log
from password import *
from buildslaves import *
from buildbot.buildslave import BuildSlave

bb_slave_port = 9989
bb_try_port = 8033
bb_web_port = 8010
bb_master = "build.zfsonlinux.org:9989"
bb_url = "https://raw.githubusercontent.com/zfsonlinux/zfs-buildbot/master/scripts/"
zol_url = "http://zfsonlinux.org"
web_url = "http://build.zfsonlinux.org/"
spl_repo = "https://github.com/zfsonlinux/spl.git"
zfs_repo = "https://github.com/zfsonlinux/zfs.git"
linux_repo = "https://github.com/torvalds/linux.git"
zfs_path = "/usr/libexec/zfs:/usr/share/zfs:/usr/lib/rpm/zfs:/usr/lib/zfs"
bin_path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

all_repositories = {
    "https://github.com/torvalds/linux" : 'linux',
    "https://github.com/zfsonlinux/spl" : 'spl',
    "https://github.com/zfsonlinux/zfs" : 'zfs',
    "https://github.com/torvalds/linux.git" : 'linux',
    "https://github.com/zfsonlinux/spl.git" : 'spl',
    "https://github.com/zfsonlinux/zfs.git" : 'zfs',
}

c = BuildmasterConfig = {}

c['caches'] = {
    'Changes' : 10,
    'Builds' : 100,
    'chdicts' : 10,
    'BuildRequests' : 10,
    'SourceStamps' : 20,
    'ssdicts' : 20,
    'objectids' : 10,
    'usdicts' : 10,
}

####### FACTORIES

from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.status.results import SUCCESS
from buildbot.status.results import FAILURE
from buildbot.status.results import WARNINGS
from buildbot.status.results import SKIPPED

#
# Perform a local in-tree build using the default options.  This is
# solely for the purpose of ensuring we don't break the build.
#

def do_step_build(step, name):
    props = step.build.getProperties()
    if props.hasProperty(name) and props[name] == "yes":
        return True
    else:
        return False

def do_step_build_linux(step):
    return do_step_build(step, 'buildlinux')

def do_step_build_spl(step):
    return do_step_build(step, 'buildspl')

def do_step_build_zfs(step):
    return do_step_build(step, 'buildzfs')

def do_step_check_lint(step):
    return do_step_build(step, 'checklint')

style_factory = util.BuildFactory()

style_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
style_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))
style_factory.addStep(ShellCommand(
    workdir="build/zfs", env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : '--with-config=srpm'},
    command=["runurl", bb_url + "bb-build-zfs.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"]))
style_factory.addStep(ShellCommand(command=["make", "checkstyle"],
    env={'PATH' : bin_path},
    workdir="build/zfs", logEnviron=False,
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking style"], descriptionDone=["checked style"]))
style_factory.addStep(ShellCommand(command=["make", "lint"],
    env={'PATH' : bin_path},
    workdir="build/zfs", logEnviron=False,
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking lint"], descriptionDone=["checked lint"],
    doStepIf = do_step_check_lint,
    hideStepIf=lambda results, s: results==SKIPPED))

build_factory = util.BuildFactory()

build_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))

build_factory.addStep(Git(repourl=linux_repo, workdir="build/linux",
    mode="full", method="clobber", shallow=True, codebase="linux",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))
build_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))

build_factory.addStep(ShellCommand(
    workdir="build/linux", env={'PATH' : bin_path,
        'LINUX_BUILTIN' : util.Interpolate('%(prop:builtin:-no)s') },
    command=["runurl", bb_url + "bb-build-linux.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              ".config"    : { "filename" : ".config",       "follow" : False},
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building linux"], descriptionDone=["built linux"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/spl", env={'PATH' : bin_path,
        'LINUX_CUSTOM' : util.Interpolate('%(prop:buildlinux:-no)s') },
    command=["runurl", bb_url + "bb-build-zfs.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"],
    doStepIf = do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/zfs", env={'PATH' : bin_path,
        'LINUX_CUSTOM' : util.Interpolate('%(prop:buildlinux:-no)s') },
    command=["runurl", bb_url + "bb-build-zfs.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(command=["make", "lint"],
    workdir="build/zfs", logEnviron=False, env={'PATH' : bin_path},
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking lint"], descriptionDone=["checked lint"],
    doStepIf = do_step_check_lint,
    hideStepIf=lambda results, s: results==SKIPPED))

#
# Perform a package build with debugging enabled, install the packages,
# and run of the test suite.  The tests themselves have been seperated from
# the buildbot configuration to minimize the need for restarting the master.
#

@util.renderer
def getConsoleLogCmd(props):
    args = ["sh", "-c"]
    instance = props.getProperty('instance')
    args.extend(["ec2-get-console-output %s" % (instance)])
    return args

test_factory = util.BuildFactory()

test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
test_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))
test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(prop:configspl:-"")s') },
    workdir="build/spl",
    command=["runurl", bb_url + "bb-build-packages.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"]))
test_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))
test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(prop:configzfs:-"")s') },
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build-packages.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"]))

# Test suites
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=120, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/splat",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-splat.sh"],
    haltOnFailure=False, maxTime=600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["splat"], descriptionDone=["splat"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/ztest",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-ztest.sh"],
    haltOnFailure=False, maxTime=14400, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"ztest.out" : { "filename" : "ztest.out", "follow" : False },
              "console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["ztest"], descriptionDone=["ztest"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/ziltest",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-ziltest.sh"],
    haltOnFailure=False, maxTime=120, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["ziltest"], descriptionDone=["ziltest"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zconfig",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-zconfig.sh"],
    haltOnFailure=False, maxTime=600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zconfig"], descriptionDone=["zconfig"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zimport",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-zimport.sh"],
    haltOnFailure=False, maxTime=1200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zimport"], descriptionDone=["zimport"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/filebench",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-filebench.sh"],
    haltOnFailure=False, maxTime=3600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure" : { "filename" : "configure.log", "follow" : True },
              "make"      : { "filename" : "make.log",      "follow" : True },
              "console"   : { "filename" : "console.log",   "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["filebench"], descriptionDone=["filebench"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/xfstests",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-xfstests.sh"],
    haltOnFailure=False, maxTime=1200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure" : { "filename" : "configure.log", "follow" : True },
              "make"      : { "filename" : "make.log",      "follow" : True },
              "console"   : { "filename" : "console.log",   "follow" : False },
              "kmemleak"  : { "filename" : "kmemleak.log",  "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["xfstest"], descriptionDone=["xfstests"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zfstests",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-zfstests.sh"],
    haltOnFailure=False, maxTime=57600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=4200,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : False },
              "log"      : { "filename" : "log",          "follow" : True },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfstests"], descriptionDone=["zfstests"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zfsstress",
    env={'PATH' : bin_path + ":" + zfs_path},
    command=["runurl", bb_url + "bb-test-zfsstress.sh"],
    haltOnFailure=False, maxTime=14400, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : False },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfsstress"], descriptionDone=["zfsstress"],
    hideStepIf=lambda results, s: results==SKIPPED))

test_factory.addStep(ShellCommand(command=["runurl", bb_url + "bb-cleanup.sh"],
    env={'PATH' : bin_path},
    haltOnFailure=False, logEnviron=False,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["removing zfs"], descriptionDone=["removed zfs"]))

#test_factory.addStep(MasterShellCommand(
#    command=getConsoleLogCmd,
#    haltOnFailure=False,
#    alwaysRun=True,
#    logEnviron=False,
#    description=["gathering console"],
#    descriptionDone=["gathered console"]))

#
# Perform a package build and run of the performance suite.
#
perf_factory = util.BuildFactory()

perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
perf_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))
perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(prop:configspl:-"")s') },
    workdir="build/spl",
    command=["runurl", bb_url + "bb-build-packages.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"]))
perf_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"]))
perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(prop:configzfs:-"")s') },
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build-packages.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"]))
# Test suites
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
         'AVAILABLE_DISKS' : 'xvdb xvdc xvdd'},
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=3600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=3600,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"]))
perf_factory.addStep(ShellCommand(
    workdir="build/tests/zfstests",
    env={'PATH' : bin_path + ":" + zfs_path,
         'DEFAULT_ZFSTESTS_RUNFILE' : 'perf-regression.run',
         'DEFAULT_ZFSTESTS_DISKS' : 'xvdb1 xvdc1 xvdd1'},
    command=["runurl", bb_url + "bb-test-zfstests.sh"],
    haltOnFailure=False, maxTime=21600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False },
              "log"     : { "filename" : "log",         "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    timeout=5400, description=["zfstests"], descriptionDone=["zfstests"],
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(command=["runurl", bb_url + "bb-cleanup.sh"],
    env={'PATH' : bin_path},
    haltOnFailure=False, logEnviron=False,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["removing zfs"], descriptionDone=["removed zfs"]))

####### BUILDERS & BUILDSLAVES
# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which slaves can execute them.  Note
# that any particular build will only take place on one slave.

builder_default_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_redhat_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "--enable-debug --with-spec=redhat",
    "configzfs":     "--enable-debug --with-spec=redhat",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_release_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "",
    "configzfs":     "",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_linux_properties = {
    "buildlinux":    "yes",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_builtin_properties = {
    "buildlinux":    "yes",
    "buildspl":      "no",
    "buildzfs":      "no",
    "builtin":       "yes",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_style_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "yes",
}

builder_arch_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "yes",
}

builder_perf_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configspl":     "",
    "configzfs":     "",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

def prioritizeBuilders(buildmaster, builders):
    """
    Called by the buildmaster to prioritize the builders.  Returns a sorted
    array of builders designed to improve ec2 utilization. Builders with
    substantiated, idle slaves are given priority. Followed by builders with no
    substantiated slaves. The lowest priority is a builder that is busy.
    This helps keep all buildslaves busy while new latent buildslaves are 
    bootstrapped, a process which can take several minutes.
    """

    idle_builders = []
    busy_builders = []
    avail_builders = []

    for b in builders:
        idle = False
        busy = False
        for s in b.slaves:
            if s.isIdle():
               idle = True
               break

            if s.isBusy():
               busy = True

        if idle is True:
            if re.search('BUILD', b.name):
                idle_builders.insert(0, b)
            else:
                idle_builders.append(b)
        elif busy is True:
            if re.search('BUILD', b.name):
                busy_builders.insert(0, b)
            else:
                busy_builders.append(b)
        else:
            if re.search('BUILD', b.name):
                avail_builders.insert(0, b)
            else:
                avail_builders.append(b)

    sorted_builders = idle_builders + avail_builders + busy_builders

    log.msg("prioritized %i builder(s): %s" % (len(sorted_builders),
        [b.name for b in sorted_builders]))

    return sorted_builders

c['prioritizeBuilders'] = prioritizeBuilders

# STYLE BUILD SLAVES
numstyleslaves = 1

style_slaves = [
    ZFSEC2BuildSlave(
        name="Amazon-2015.09-x86_64-styleslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numstyleslaves)
]

# DISTRO BUILD SLAVES
numslaves = 1

kernel_default_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Amazon-KernelDefault-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numslaves)
]

kernel_builtin_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Amazon-KernelBuiltin-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numslaves)
]

debian8_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Debian-8-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-7cf0bf1c"
    ) for i in range(0, numslaves)
]

fedora24_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Fedora-24-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-286f2448"
    ) for i in range(0, numslaves)
]

centos6_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="CentOS-6.7-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-d5b4f8b5"
    ) for i in range(0, numslaves)
]

centos7_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="CentOS-7.1-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-dfade1bf"
    ) for i in range(0, numslaves)
]

ubuntu14_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Ubuntu-14.04-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-939eddf3"
    ) for i in range(0, numslaves)
]

ubuntu16_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Ubuntu-16.04-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-429edd22"
    ) for i in range(0, numslaves)
]

distro_slaves = kernel_default_x86_64_slave + kernel_builtin_x86_64_slave + debian8_x86_64_slave + fedora24_x86_64_slave + centos6_x86_64_slave + centos7_x86_64_slave + ubuntu14_x86_64_slave + ubuntu16_x86_64_slave

# ARCH BUILD SLAVES
amazon_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Amazon-2015.09-x86_64-buildslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numslaves)
]

ubuntu14_i686_slave = [
    ZFSEC2PVSlave(
        name="Ubuntu-14.04-i686-buildslave%s" % (str(i+1)),
        ami="ami-729ed412"
    ) for i in range(0, numslaves)
]

debian8_arm_slave = [
    BuildSlave("Debian-8-arm-buildslave1", slave_userpass["Debian-8-arm-buildslave1"]),
    BuildSlave("Debian-8-arm-buildslave2", slave_userpass["Debian-8-arm-buildslave2"]),
]

ubuntu16_aarch64_slave = [
    BuildSlave("Ubuntu-16.04-aarch64-buildslave1", slave_userpass["Ubuntu-16.04-aarch64-buildslave1"]),
    BuildSlave("Ubuntu-16.04-aarch64-buildslave2", slave_userpass["Ubuntu-16.04-aarch64-buildslave2"]),
]

debian8_ppc_slave = [
    BuildSlave("Debian-8-ppc-buildslave", slave_userpass["Debian-8-ppc-buildslave"]),
]

debian8_ppc64_slave = [
    BuildSlave("Debian-8-ppc64-buildslave1", slave_userpass["Debian-8-ppc64-buildslave1"]),
    BuildSlave("Debian-8-ppc64-buildslave2", slave_userpass["Debian-8-ppc64-buildslave2"]),
]

arch_slaves = amazon_x86_64_slave + debian8_ppc64_slave + debian8_ppc_slave + ubuntu16_aarch64_slave + debian8_arm_slave +  ubuntu14_i686_slave

# TEST SLAVES
numtestslaves = 16

amazon_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Amazon-2015.09-x86_64-testslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numtestslaves)
]

amazon_x86_64_simd_testslave = [
    ZFSEC2VectorTestSlave(
        name="Amazon-2015.09-x86_64-simd-testslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numtestslaves)
]

centos6_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-6-x86_64-testslave%s" % (str(i+1)),
        ami="ami-d5b4f8b5"
    ) for i in range(0, numtestslaves)
]

centos7_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-7-x86_64-testslave%s" % (str(i+1)),
        ami="ami-dfade1bf"
    ) for i in range(0, numtestslaves)
]

centos7_x86_64_ml_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-7-x86_64-ml-testslave%s" % (str(i+1)),
        ami="ami-c83a72a8"
    ) for i in range(0, numtestslaves)
]

ubuntu14_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-14.04-x86_64-testslave%s" % (str(i+1)),
        ami="ami-939eddf3"
    ) for i in range(0, numtestslaves)
]

ubuntu14_i686_testslave = [
    ZFSEC2PVTestSlave(
        name="Ubuntu-14.04-i686-testslave%s" % (str(i+1)),
        ami="ami-729ed412"
    ) for i in range(0, numtestslaves)
]

ubuntu16_x86_64_kmemleak_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-16.04-x86_64-kmemleak-testslave%s" % (str(i+1)),
        ami="ami-76a6f116"
    ) for i in range(0, numtestslaves)
]

test_slaves = amazon_x86_64_testslave + amazon_x86_64_simd_testslave + centos6_x86_64_testslave + centos7_x86_64_testslave + centos7_x86_64_ml_testslave + ubuntu14_x86_64_testslave + ubuntu14_i686_testslave + ubuntu16_x86_64_kmemleak_testslave

numperfslaves = 2

amazon_x86_64_perfslave = [
    ZFSEC2PerfTestSlave(
        name="Amazon-2015.09-x86_64-perfslave%s" % (str(i+1)),
        ami="ami-def7bebe"
    ) for i in range(0, numperfslaves)
]

perf_slaves = amazon_x86_64_perfslave

all_slaves = style_slaves + distro_slaves + arch_slaves + test_slaves + perf_slaves

style_tags = [ "Style" ]
build_distro_tags = [ "Distributions" ]
build_arch_tags = [ "Architectures" ]
test_tags = [ "Tests" ]
perf_tags = [ "Performance" ]

style_builders = [
    #### Style builders
    ZFSBuilderConfig(
        name="Amazon 2015.09 x86_64 (STYLE)",
        factory=style_factory,
        slavenames=[slave.slavename for slave in style_slaves],
        tags=style_tags,
        properties=builder_style_properties,
    ),
]

distro_builders = [
    #### Distro builders
    ZFSBuilderConfig(
        name="Kernel.org Default x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in kernel_default_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_linux_properties,
    ),
    ZFSBuilderConfig(
        name="Kernel.org Built-in x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in kernel_builtin_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_builtin_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in debian8_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Fedora 24 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in fedora24_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 6.7 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in centos6_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 7.1 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in centos7_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 14.04 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in ubuntu14_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in ubuntu16_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
]

arch_builders = [
    #### Architecture builders
    ZFSBuilderConfig(
        name="Amazon 2015.09 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in amazon_x86_64_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 14.04 i686 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in ubuntu14_i686_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 arm (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_arm_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 aarch64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in ubuntu16_aarch64_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 ppc (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_ppc_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 ppc64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_ppc64_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
]

test_builders = [
    #### Test builders
    ZFSBuilderConfig(
        name="Amazon 2015.09 x86_64 Release (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in amazon_x86_64_testslave],
        tags=test_tags,
        properties=builder_release_properties,
    ),
    ZFSBuilderConfig(
        name="Amazon 2015.09 x86_64 SIMD (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in amazon_x86_64_simd_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 6.7 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos6_x86_64_testslave],
        tags=test_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 7.1 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos7_x86_64_testslave],
        tags=test_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 7 x86_64 Mainline (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos7_x86_64_ml_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 14.04 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu14_x86_64_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 14.04 i686 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu14_i686_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 x86_64 Kmemleak (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu16_x86_64_kmemleak_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
]

perf_builders = [
    #### Perf builders
    ZFSBuilderConfig(
        name="Amazon 2015.09 x86_64 (PERF)",
        factory=perf_factory,
        slavenames=[slave.name for slave in amazon_x86_64_perfslave],
        tags=perf_tags,
        properties=builder_perf_properties,
    ),
]

all_builders = style_builders + distro_builders + arch_builders + test_builders + perf_builders

c['slaves'] = all_slaves 
c['builders'] = all_builders 

# The 'protocols' setting contains information about protocols which master
# will use for communicating with slaves.
c['protocols'] = {'pb': {'port': bb_slave_port}}

####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  For this project all notifications occur via
# a Github webhook.  These can be for branch updates or modifications to
# pull requests (open, reopen, synchronize).  A custom pull request handler
# is used to submit changes for every commit which is part of a pull request.

import logging
import urllib2
import json

from buildbot.status.web.hooks.github import GitHubEventHandler
from dateutil.parser import parse as dateparse
from twisted.python import log

def query_url(url, token=None):
    log.msg("Making request to '%s'" % url)
    request = urllib2.Request(url)
    if token:
        request.add_header("Authorization", "token %s" % token)
    response = urllib2.urlopen(request)
    return json.loads(response.read())

def parse_link_header(link_header):
    links = {}
    prog = re.compile('^<([^>]*)>; rel="([^"]*)"$')
    for s in link_header.split(", "):
        m = prog.search(s)
        if m:
            links[m.group(2)] = m.group(1)
        else:
            raise RuntimeError("Could not parse '%s'" % s)
    return links

class CustomGitHubEventHandler(GitHubEventHandler):
    def handle_pull_request(self, payload):
        changes = []
        number = payload['number']
        refname = 'refs/pull/%d/head' % (number,)
        commits_num = payload['pull_request']['commits']
        commits_url = payload['pull_request']['commits_url']
        created_at = dateparse(payload['pull_request']['created_at'])
        commits_cur = 0

        log.msg('Processing GitHub PR #%d' % number, logLevel=logging.DEBUG)

        action = payload.get('action')
        if action not in ('opened', 'reopened', 'synchronize'):
            log.msg("GitHub PR #%d %s, ignoring" % (number, action))
            return changes, 'git'

        commits = query_url(commits_url, token=github_token)

        # Extract any dependency information and translate to a standard form.
        # Requires-spl: refs/pull/PR/head
        spl_pull_request = None
        pattern = '^Requires-spl:\s*([a-zA-Z0-9_\-\:\/\+]+)'
        for commit in commits:
            comments = commit['commit']['message']
            m = re.search(pattern, comments, re.I | re.M)
            if m is not None:
                spl_pull_request = 'Requires-spl: %s' % m.group(1)
                break

        for commit in commits:
            commit = query_url(commit['url'], token=github_token)
            commits_cur += 1

            # Assemble the list of modified files.
            changed_files = []
            for f in commit['files']:
                changed_files.append(f['filename'])

            # Annotate the head commit to allow special handling.
            if commit['sha'] == payload['pull_request']['head']['sha']:
                category = "style,build,test"
            else:
                category = "style,build"

            # Extract any overrides for which builders need to be run for this commit
            # Requires-builders: style build arch distro test perf
            category_pattern = '^Requires-builders:\s*([ ,a-zA-Z0-9]+)'
            m = re.search(category_pattern, comments, re.I | re.M)
            if m is not None:
                category = m.group(1).lower();

                # if Requires-builders contains 'all', then all builders should run
                all_pattern = '.*all.*'
                m = re.search(all_pattern, category, re.I | re.M)
                if m is not None:
                    category = "style,build,test,perf"

            # Annotate every commit with 'Requires-spl' when missing.
            comments = commit['commit']['message'] + "\n\n"
            if spl_pull_request:
                if re.search(pattern, comments, re.I | re.M) is None:
                    comments = comments + spl_pull_request + "\n"

            comments = comments + "Pull-request: #%d part %d/%d\n" % (
                number, commits_cur, commits_num)

            change = {
                'revision' : commit['sha'],
                'when_timestamp': created_at,
                'branch': refname,
                'revlink' : commit['html_url'],
                'repository': payload['repository']['clone_url'],
                'project' : payload['repository']['name'],
                'category': category,
                'author': "%s <%s>" % (commit['commit']['committer']['name'],
                                       commit['commit']['committer']['email']),
                'comments' : comments,
                'files' : changed_files,
                'commit_part' : commits_cur,
                'commits_total' : commits_num,
            }

            if callable(self._codebase):
                change['codebase'] = self._codebase(payload)
            elif self._codebase is not None:
                change['codebase'] = self._codebase

            changes.append(change)

        log.msg("Received %d changes from GitHub Pull Request #%d" % (
            len(changes), number))
        return changes, 'git'

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.trysched import Try_Userpass
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.changes import filter
import copy

style_builders = [builder.name for builder in style_builders]
distro_builders = [builder.name for builder in distro_builders]
arch_builders = [builder.name for builder in arch_builders]
test_builders = [builder.name for builder in test_builders]
perf_builders = [builder.name for builder in perf_builders]

c['schedulers'] = []

default_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master', 'revision': None},
    'spl'   : {'repository': spl_repo, 'branch': 'master', 'revision': None},
    'zfs'   : {'repository': zfs_repo, 'branch': 'master', 'revision': None} }

class CustomSingleBranchScheduler(SingleBranchScheduler):
    spl_pull_request = None

    def gotChange(self, change, important):
        pattern = '^Requires-spl:\s*([a-zA-Z0-9_\-\:\/\+]+)'
        m = re.search(pattern, change.comments, re.I | re.M)
        if m is not None:
            self.spl_pull_request = m.group(1)
        else:
            self.spl_pull_request = None

        return SingleBranchScheduler.gotChange(self, change, important)

    def getCodebaseDict(self, codebase):
        ss = copy.deepcopy(self.codebases[codebase])
        if codebase == "spl":
            if self.spl_pull_request is not None:
                ss['branch'] = self.spl_pull_request

        return ss

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-style-scheduler",
    builderNames=style_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*style.*")))

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-distro-scheduler",
    builderNames=distro_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*(build|distro).*")))

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-arch-scheduler",
    builderNames=arch_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*(build|arch).*")))

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-test-scheduler",
    builderNames=test_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*test.*")))

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-perf-scheduler",
    builderNames=perf_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*perf.*")))

# This scheduler is for pushes to branches.
c['schedulers'].append(SingleBranchScheduler(
    name="branch-scheduler",
    builderNames=style_builders+distro_builders+arch_builders+test_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(project_re=".*/zfs.*")))

# This allows for 'buildbot try' users.
c['schedulers'].append(Try_Userpass(
    name="try-scheduler",
    port=bb_try_port,
    builderNames=style_builders+distro_builders+arch_builders+test_builders,
    userpass=try_userpass))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import status, util

authz_cfg=util.Authz(
    auth=util.BasicAuth(web_userpass),
    gracefulShutdown = False,
    pingBuilder = False,
    pauseSlave = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(http_port=bb_web_port,
    order_console_by_time=True, authz=authz_cfg,
    change_hook_dialects={"github" :
        {"secret"   : github_secret,
         "class"    : CustomGitHubEventHandler },
    }))

#
# Used to post builder status updated to Github.
#
repoOwner = util.Interpolate("%(prop:repoowner)s")
repoName = util.Interpolate("%(prop:reponame)s")
sha = util.Interpolate("%(src:zfs:revision)s")
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = status.GitHubStatus(
    token=github_token,
    repoOwner=repoOwner,
    repoName=repoName,
    sha=sha,
    context=context,
    startDescription='Build started.',
    endDescription='Build done.')

c['status'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ZFS on Linux"
c['titleURL'] = zol_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = web_url

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
