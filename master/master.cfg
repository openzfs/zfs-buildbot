# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from twisted.python import log
from password import *
from repository import *
from github import *
from buildslaves import *
from buildbot.buildslave import BuildSlave
from buildbot.plugins import util
from buildbot.schedulers.timed import Nightly

import requests
import os.path
import copy
import re

bb_slave_port = 9989
bb_web_port = 8010
bb_master = "build.zfsonlinux.org:9989"
bb_url = "https://raw.githubusercontent.com/openzfs/zfs-buildbot/master/scripts/"
openzfs_url = "https://github.com/openzfs/zfs/wiki"
web_url = "http://build.zfsonlinux.org/"
zfs_path = "/usr/libexec/zfs:/usr/share/zfs:/usr/lib/rpm/zfs:/usr/lib/zfs:/usr/local/share/zfs"
bin_path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

c = BuildmasterConfig = {}

c['caches'] = {
    'Changes' : 100,
    'Builds' : 20,
    'chdicts' : 100,
    'BuildRequests' : 10,
    'SourceStamps' : 10,
    'ssdicts' : 20,
    'objectids' : 10,
    'usdicts' : 10,
}

# Keep all changes and the last 20,000 build results per builder.  Only keep
# detailed build logs for the last 2000 builds for each builder (approximately
# the last 6 months of builds).  Individual log files are limited to 10M.
c['changeHorizon'] = 0
c['buildHorizon'] = 20000
c['logHorizon'] = 2000
c['logMaxSize'] = 10*1024*1024 # 10M
c['logMaxTailSize'] = 32768

####### BUILD FACTORIES

# A builder also has a BuildFactory, which is responsible for creating new
# Build instances: because the Build instance is what actually performs each
# build, choosing the BuildFactory is the way to specify what happens each
# time a build is done (Builds).

from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.status.results import SUCCESS
from buildbot.status.results import FAILURE
from buildbot.status.results import WARNINGS
from buildbot.status.results import SKIPPED

def do_step_build(step, name):
    props = step.build.getProperties()

    override_name = 'override-' + name
    if props.hasProperty(override_name):
        m = re.match(r".*yes.*", props[override_name])
        if m is not None:
            return True
        else:
            return False

    if props.hasProperty(name):
        m = re.match(r".*yes.*", props[name])
        if m is not None:
            return True
        else:
            return False
    else:
        return False

def do_step_build_linux(step):
    return do_step_build(step, 'buildlinux')

def do_step_build_zfs(step):
    return do_step_build(step, 'buildzfs')

def perform_zfs_build(step):
    return do_step_build_zfs(step) and not do_step_build(step, 'builtin')

def do_step_check_lint(step):
    return do_step_build(step, 'checklint')

def do_step_perf_pts(step):
    return do_step_build(step, 'perfpts')

def do_step_perf_zts(step):
    return do_step_build(step, 'perfzts')

def determine_prop(props, name, default):
    override_name = 'override-' + name
    if props.hasProperty(override_name):
        return props[override_name]

    if props.hasProperty(name):
        return props[name]

    return default

@util.renderer
def get_buildlinux(props):
    return determine_prop(props, 'buildlinux', 'no')

@util.renderer
def get_builtin(props):
    return determine_prop(props, 'builtin', 'no')

@util.renderer
def get_configzfs(props):
    return determine_prop(props, 'configzfs', '')

@util.renderer
def get_install(props):
    return determine_prop(props, 'install', 'none')

@util.renderer
def get_version(props):
    return props.getProperty('commit-description')['zfs']

@util.renderer
def get_branch_or_pr(props):
    if props.hasProperty('pr_number'):
        return 'artifacts/pull/' + props.getProperty('pr_number')
    elif props.hasProperty('branch'):
        return 'artifacts/branch/' + props.getProperty('branch')
    else:
        return 'artifacts/branch/none'

#
# Build factory - Build source in-tree
#
# Perform an in-tree build using the default options.  This is used to verify
# the build accross a range of distributions and architectures.
#
build_factory = util.BuildFactory()

build_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
build_factory.addStep(Git(repourl=linux_repo, workdir="build/linux",
    mode="full", method="clobber", shallow=True, codebase="linux",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/linux", env={'PATH' : bin_path,
        'LINUX_BUILTIN' : util.Interpolate('%(kw:p)s', p=get_builtin),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build-linux.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              ".config"    : { "filename" : ".config",       "follow" : False },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "config.zfs.log" :
                  { "filename" : "../zfs/config.log", "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building linux"], descriptionDone=["built linux"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/zfs", env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configzfs),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : 'none',
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf = perform_zfs_build,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(command=["make", "lint"],
    workdir="build/zfs", logEnviron=False, env={'PATH' : bin_path},
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking lint"], descriptionDone=["checked lint"],
    doStepIf = do_step_check_lint,
    hideStepIf=lambda results, s: results==SKIPPED))

#
# Test factory - Build packages and run the test suites.
#
# Perform a package build with debugging enabled, install the packages,
# and run of the test suite.  The tests themselves have been seperated from
# the buildbot configuration to minimize the need for restarting the master.
#
test_factory = util.BuildFactory()

test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
test_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configzfs),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'TEST_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=120, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"],
    alwaysRun=True))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-ztest.sh"],
    haltOnFailure=False, maxTime=14400, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"ztest.out" : { "filename" : "ztest.out" },
              "ztest.history" : { "filename" : "ztest.history" },
              "1.ztest.out" : { "filename" : "ztest.core.1/ztest.out" },
              "1.ztest.history" : { "filename" : "ztest.core.1/ztest.history" },
              "1.ztest.zdb" : { "filename" : "ztest.core.1/ztest.zdb" },
              "1.ztest.gdb" : { "filename" : "ztest.core.1/ztest.gdb" },
              "2.ztest.out" : { "filename" : "ztest.core.2/ztest.out" },
              "2.ztest.history" : { "filename" : "ztest.core.2/ztest.history" },
              "2.ztest.zdb" : { "filename" : "ztest.core.2/ztest.zdb" },
              "2.ztest.gdb" : { "filename" : "ztest.core.2/ztest.gdb" },
              "3.ztest.out" : { "filename" : "ztest.core.3/ztest.out" },
              "3.ztest.history" : { "filename" : "ztest.core.3/ztest.history" },
              "3.ztest.zdb" : { "filename" : "ztest.core.3/ztest.zdb" },
              "3.ztest.gdb" : { "filename" : "ztest.core.3/ztest.gdb" }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["ztest"], descriptionDone=["ztest"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'DEFAULT_ZFSTESTS_TAGS' : 'functional'},
    command=["runurl", bb_url + "bb-test-zfstests.sh"],
    haltOnFailure=False, flunkOnWarnings=True,
    maxTime=36000, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=4200,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : True },
              "summary"  : { "filename" : "summary.log",  "follow" : False },
              "tests"    : { "filename" : "test.log",     "follow" : True },
              "log"      : { "filename" : "full.log",     "follow" : True },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfstests"], descriptionDone=["zfstests"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'ZFS_VERSION' : util.Interpolate('%(kw:p)s', p=get_version),
        'CODECOV_TOKEN' : codecov_token,
        'ZFS_REVISION' : util.Interpolate("%(src:zfs:revision)s"),
        'BASE_BRANCH' : util.Interpolate("%(src:zfs:branch)s"),
        'PR_NUMBER' : util.Interpolate("%(prop:pr_number)s"),
        'BUILDER_NAME' : util.Interpolate("%(prop:buildername)s"),
        'BUILD_NUMBER' : util.Interpolate("%(prop:buildnumber)s") },
    command=["runurl", bb_url + "bb-test-cleanup.sh"],
    haltOnFailure=False, maxTime=1800, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"coverage-user"   : { "filename" : "coverage-user.tar.xz",   "follow" : False },
              "coverage-kernel" : { "filename" : "coverage-kernel.tar.xz", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["analysis"], descriptionDone=["analysis"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(DirectoryUpload(
    slavesrc=util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    masterdest=util.Interpolate("public_html/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    url=util.Interpolate("%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    alwaysRun=True))
test_factory.addStep(ShellCommand(command=["runurl", bb_url + "bb-cleanup.sh"],
    env={'PATH' : bin_path, 'BUILT_PACKAGE' : 'zfs'},
    haltOnFailure=False, logEnviron=False,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["removing zfs"], descriptionDone=["removed zfs"],
    doStepIf=do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))

#
# Performance factory - Build packages and run the performance suite.
#
# Perform a package build with debugging disabled, install the packages,
# and run a battery of performance tests.  The tests themselves have been
# seperated from the buildbot configuration to minimize the need for
# restarting the master.
#
perf_factory = util.BuildFactory()

perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
perf_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf=do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configzfs),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf=do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'TEST_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=3600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=3600,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"],
    alwaysRun=True))
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'ZFS_VERSION' : util.Interpolate('%(kw:p)s', p=get_version) },
    command=["runurl", bb_url + "bb-test-pts.sh"],
    haltOnFailure=False, maxTime=43200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"config" : { "filename" : "config.log", "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    timeout=5400, description=["pts"], descriptionDone=["pts"],
    doStepIf=do_step_perf_pts,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'DEFAULT_ZFSTESTS_RUNFILE' : 'perf-regression',
        'DEFAULT_ZFSTESTS_TAGS' : 'perf',
        'DEFAULT_ZFSTESTS_DISKS' : 'xvdb xvdc xvdd',
        'DEFAULT_ZFSTESTS_DISKSIZE' : '64G'},
    command=["runurl", bb_url + "bb-test-zfstests.sh"],
    haltOnFailure=False, flunkOnWarnings=True,
    maxTime=43200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=7200,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : False },
              "summary"  : { "filename" : "summary.log",  "follow" : False },
              "tests"    : { "filename" : "test.log",     "follow" : True },
              "log"      : { "filename" : "full.log",     "follow" : True },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfstests"], descriptionDone=["zfstests"],
    doStepIf=do_step_perf_zts,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(DirectoryUpload(
    slavesrc=util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    masterdest=util.Interpolate("public_html/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    url=util.Interpolate("%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    alwaysRun=True))


####### WORKERS / SLAVES

# Each builder is associated with one of more workers / slaves.  They are
# responsible for carrying out the steps described by a build factory.
# Note that any particular build will only take place on one slave.
#

# Provided by CentOS: https://wiki.centos.org/Cloud/AWS
centos6_ami = "ami-ade6e5cd"		# CentOS 6 1-12-2018
centos7_ami = "ami-08d2d8b00f270d03b"	# CentOS 7 1-06-2021

# Centos 8 (NOTE!!!)
#
# After RedHat reported that CentOS would prematurely be EOL'd on
# Dec 31 2021, we have decided to switch to Almalinux for CentOS 8
# builders.  Almalinux is a open source, supported, clone on RHEL/CentOS 8.
# We still use the "CentOS" naming in buildbot since it's still CentOS
# compatible, and so we don't have to update all our bash scripts.
#
# This is the Almalinux 8 AMI:
centos8_ami = "ami-0473bc9e4bfe85b1b"

#
# ... and for future reference, Almalinux 8 on us-west-2 is:
# ami-0959211852ea0efa6

centosstream8_ami = "ami-0f377b303df4963ab" # CentOS Stream 8 1-06-2021

# Provided by Debian: https://wiki.debian.org/Cloud/AmazonEC2Image
debian10_amd64_ami = "ami-0ed1af421f2a3cf40" # Debian 10 9-9-2019
debian10_arm64_ami = "ami-0a61b13f06119b46c" # Debian 10 9-28-2020

# Provided by Fedora: https://alt.fedoraproject.org/cloud/
fedora35_ami = "ami-052a62f38ec784c40"  # Fedora 35 Dec 13 2021

# Provided by Cannonical: https://cloud-images.ubuntu.com/locator/ec2/
ubuntu18_ami = "ami-03c9dad75296f9e90"	# Ubuntu 18.04 4-26-2018
ubuntu20_ami = "ami-036e9fc1037b68e21"	# Ubuntu 20.04 6-19-2020

# Custom AMIs
coverage_ami = "ami-a97867c9" # Ubuntu 17.04 5-2-2018

# Provided by FreeBSD.
def freebsd_ami(abi, version):
    bucket = "freebsdamiregistrystack-freebsdamiregistry0b72b4d-170sx91rgh82n"
    url = "https://%s.s3.amazonaws.com/%s/%s/latest.json" % (bucket, abi, version)
    response = requests.get(url)
    data = response.json()
    return data['ImageId']

def get_freebsd12_image(slave):
    slave.ami = freebsd_ami("amd64", "12.3-STABLE")
    return slave.conn.get_image(slave.ami)

def get_freebsd13_image(slave):
    slave.ami = freebsd_ami("amd64", "13.1-BETA2")
    return slave.conn.get_image(slave.ami)

def get_freebsd14_image(slave):
    slave.ami = freebsd_ami("amd64", "14.0-CURRENT")
    return slave.conn.get_image(slave.ami)

#
# Architecture slaves
#
numarchslaves = 2

ubuntu18_i386_slave = [
    BuildSlave("Ubuntu-18.04-i386-buildslave1",
        slave_userpass["Ubuntu-18.04-i386-buildslave1"]),
    BuildSlave("Ubuntu-18.04-i386-buildslave2",
        slave_userpass["Ubuntu-18.04-i386-buildslave2"]),
]

ubuntu20_arm_slave = [
    BuildSlave("Ubuntu-20.04-arm-buildslave1",
        slave_userpass["Ubuntu-20.04-arm-buildslave1"]),
    BuildSlave("Ubuntu-20.04-arm-buildslave2",
        slave_userpass["Ubuntu-20.04-arm-buildslave2"]),
]

debian10_arm64_slave = [
    ZFSEC2BuildSlave(
        name="Debian-10-arm64-buildslave%s" % (str(i+1)),
        ami=debian10_arm64_ami,
        arch="arm64"
    ) for i in range(0, numarchslaves)
]

debian8_ppc64_slave = [
    BuildSlave("Debian-8-ppc64-buildslave1",
        slave_userpass["Debian-8-ppc64-buildslave1"]),
    BuildSlave("Debian-8-ppc64-buildslave2",
        slave_userpass["Debian-8-ppc64-buildslave2"]),
]

arch_slaves = \
    ubuntu18_i386_slave + \
    ubuntu20_arm_slave + \
    debian10_arm64_slave + \
    debian8_ppc64_slave

#
# Platform test slaves
#
numtestslaves = 16

centos6_x86_64_testslave = [
    ZFSEC2ENATestSlave(
        name="CentOS-6-x86_64-testslave%s" % (str(i+1)),
        ami=centos6_ami
    ) for i in range(0, numtestslaves)
]

centos7_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-7-x86_64-testslave%s" % (str(i+1)),
        ami=centos7_ami
    ) for i in range(0, numtestslaves)
]

centos8_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-8-x86_64-testslave%s" % (str(i+1)),
        ami=centos8_ami
    ) for i in range(0, numtestslaves)
]

centosstream8_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-Stream-8-x86_64-testslave%s" % (str(i+1)),
        ami=centosstream8_ami
    ) for i in range(0, numtestslaves)
]

debian10_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Debian-10-x86_64-testslave%s" % (str(i+1)),
        ami=debian10_amd64_ami
    ) for i in range(0, numtestslaves)
]

fedora35_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Fedora-35-x86_64-testslave%s" % (str(i+1)),
        ami=fedora35_ami
    ) for i in range(0, numtestslaves)
]

ubuntu18_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-18.04-x86_64-testslave%s" % (str(i+1)),
        ami=ubuntu18_ami
    ) for i in range(0, numtestslaves)
]

ubuntu20_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-20.04-x86_64-testslave%s" % (str(i+1)),
        ami=ubuntu20_ami
    ) for i in range(0, numtestslaves)
]

freebsd12_amd64_testslave = [
    ZFSEC2TestSlave(
        name="FreeBSD-stable/12-amd64-testslave%s" % (str(i+1)),
        get_image=get_freebsd12_image
    ) for i in range(0, numtestslaves)
]

freebsd13_amd64_testslave = [
    ZFSEC2TestSlave(
        name="FreeBSD-stable/13-amd64-testslave%s" % (str(i+1)),
        get_image=get_freebsd13_image
    ) for i in range(0, numtestslaves)
]

freebsd14_amd64_testslave = [
    ZFSEC2TestSlave(
        name="FreeBSD-main-amd64-testslave%s" % (str(i+1)),
        get_image=get_freebsd14_image
    ) for i in range(0, numtestslaves)
]

test_slaves = \
    centos6_x86_64_testslave + \
    centos7_x86_64_testslave + \
    centos8_x86_64_testslave + \
    centosstream8_x86_64_testslave + \
    debian10_x86_64_testslave + \
    fedora35_x86_64_testslave + \
    ubuntu18_x86_64_testslave + \
    ubuntu20_x86_64_testslave + \
    freebsd12_amd64_testslave + \
    freebsd13_amd64_testslave + \
    freebsd14_amd64_testslave

#
# Other (Built-in, Style, Coverage, Performance)
#
numbuiltinslaves = 2
numcoverageslaves = 16
numperfslaves = 2

builtin_slaves = [
    ZFSEC2BuildSlave(
        name="Ubuntu-KernelBuiltin-x86_64-buildslave%s" % (str(i+1)),
        ami=ubuntu18_ami
    ) for i in range(0, numbuiltinslaves)
]

coverage_slaves = [
    ZFSEC2CoverageSlave(
        name="Ubuntu-18.04-x86_64-coverage-testslave%s" % (str(i+1)),
        ami=coverage_ami
    ) for i in range(0, numcoverageslaves)
]

performance_slaves = [
    ZFSEC2PerfTestSlave(
        name="Ubuntu-x86_64-perfslave%s" % (str(i+1)),
        ami=ubuntu20_ami
    ) for i in range(0, numperfslaves)
]

other_slaves = \
    builtin_slaves + \
    coverage_slaves + \
    performance_slaves

#
# All slaves
#
all_slaves = \
    arch_slaves + \
    test_slaves + \
    other_slaves

arch_tags = [ "Architectures" ]
platform_tags = [ "Platforms" ]

####### BUILDERS

# The Buildmaster runs a collection of Builders, each of which handles a single
# type of build (e.g. full versus quick), on one or more workers. Builders
# serve as a kind of queue for a particular type of build. Each Builder gets a
# separate column in the waterfall display. In general, each Builder runs
# independently (although various kinds of interlocks can cause one Builder
# to have an effect on another).

# Properties are used to control how a build is performed.
builder_default_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_coverage_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "--enable-debug --enable-debuginfo --enable-code-coverage",
    "install":       "in-tree",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_dkms_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "--with-config=srpm --enable-debug --enable-debuginfo",
    "install":       "dkms",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_freebsd_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "system",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_redhat_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "--enable-debug --enable-debuginfo --with-spec=redhat",
    "install":       "packages",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_nodebug_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "",
    "install":       "packages",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_builtin_properties = {
    "buildlinux":    "yes",
    "buildzfs":      "yes",
    "builtin":       "yes",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_arch_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "yes",
}

builder_perf_properties = {
    "buildlinux":    "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configzfs":     "",
    "install":       "packages",
    "repoowner":     "openzfs",
    "reponame":      "zfs",
    "checklint":     "no",
}

def prioritizeBuilders(buildmaster, builders):
    """
    Called by the buildmaster to prioritize the builders.  Returns a sorted
    array of builders designed to improve ec2 utilization. Builders with
    substantiated, idle slaves are given priority. Followed by builders with no
    substantiated slaves. The lowest priority is a builder that is busy.
    This helps keep all buildslaves busy while new latent buildslaves are
    bootstrapped, a process which can take several minutes.
    """

    idle_builders = []
    busy_builders = []
    avail_builders = []

    for b in builders:
        idle = False
        busy = False
        for s in b.slaves:
            if s.isIdle():
               idle = True
               break

            if s.isBusy():
               busy = True

        if idle is True:
            if re.search('BUILD', b.name):
                idle_builders.insert(0, b)
            else:
                idle_builders.append(b)
        elif busy is True:
            if re.search('BUILD', b.name):
                busy_builders.insert(0, b)
            else:
                busy_builders.append(b)
        else:
            if re.search('BUILD', b.name):
                avail_builders.insert(0, b)
            else:
                avail_builders.append(b)

    sorted_builders = idle_builders + avail_builders + busy_builders

    log.msg("prioritized %i builder(s): %s" % (len(sorted_builders),
        [b.name for b in sorted_builders]))

    return sorted_builders

c['prioritizeBuilders'] = prioritizeBuilders

#
# Architecture builders
#
arch_builders = [
    ZFSBuilderConfig(
        name="Ubuntu 18.04 i386 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in ubuntu18_i386_slave],
        tags=arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 20.04 arm (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in ubuntu20_arm_slave],
        tags=arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 10 arm64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian10_arm64_slave],
        tags=arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 ppc64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_ppc64_slave],
        tags=arch_tags,
        properties=builder_arch_properties,
    ),
]

#
# Platform test builders
#
centos_6_builders = [
    ZFSBuilderConfig(
        name="CentOS 6 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos6_x86_64_testslave],
        tags=platform_tags,
        properties=builder_redhat_properties,
    ),
]

centos_7_builders = [
    ZFSBuilderConfig(
        name="CentOS 7 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos7_x86_64_testslave],
        tags=platform_tags,
        properties=builder_redhat_properties,
    ),
]

centos_8_builders = [
    ZFSBuilderConfig(
        name="CentOS 8 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos8_x86_64_testslave],
        tags=platform_tags,
        properties=builder_redhat_properties,
    ),
]

centosstream_8_builders = [
    ZFSBuilderConfig(
        name="CentOS Stream 8 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centosstream8_x86_64_testslave],
        tags=platform_tags,
        properties=builder_redhat_properties,
    ),
]

debian_10_builders = [
    ZFSBuilderConfig(
        name="Debian 10 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in debian10_x86_64_testslave],
        tags=platform_tags,
        properties=builder_default_properties,
    ),
]

fedora_35_builders = [
    ZFSBuilderConfig(
        name="Fedora 35 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in fedora35_x86_64_testslave],
        tags=platform_tags,
        properties=builder_default_properties,
    ),
]

ubuntu_18_builders = [
    ZFSBuilderConfig(
        name="Ubuntu 18.04 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu18_x86_64_testslave],
        tags=platform_tags,
        properties=builder_default_properties,
    ),
]

ubuntu_20_builders = [
    ZFSBuilderConfig(
        name="Ubuntu 20.04 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu20_x86_64_testslave],
        tags=platform_tags,
        properties=builder_default_properties,
    ),
]

freebsd_12_builders = [
    ZFSBuilderConfig(
        name="FreeBSD stable/12 amd64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in freebsd12_amd64_testslave],
        tags=platform_tags,
        properties=builder_freebsd_properties,
    ),
]

freebsd_13_builders = [
    ZFSBuilderConfig(
        name="FreeBSD stable/13 amd64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in freebsd13_amd64_testslave],
        tags=platform_tags,
        properties=builder_freebsd_properties,
    ),
]

freebsd_14_builders = [
    ZFSBuilderConfig(
        name="FreeBSD main amd64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in freebsd14_amd64_testslave],
        tags=platform_tags,
        properties=builder_freebsd_properties,
    ),
]

test_builders = \
    centos_6_builders + \
    centos_7_builders + \
    centos_8_builders + \
    centosstream_8_builders + \
    debian_10_builders + \
    fedora_35_builders + \
    ubuntu_18_builders + \
    ubuntu_20_builders + \
    freebsd_12_builders + \
    freebsd_13_builders + \
    freebsd_14_builders

nightly_builders = \
    centos_7_builders + \
    centos_8_builders + \
    debian_10_builders + \
    fedora_35_builders + \
    ubuntu_18_builders + \
    freebsd_12_builders + \
    freebsd_13_builders

#
# Other builders (built-in, coverage, performance)
#
builtin_builders = [
    ZFSBuilderConfig(
        name="Kernel.org Built-in x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in builtin_slaves],
        properties=builder_builtin_properties,
    ),
]

coverage_builders = [
    ZFSBuilderConfig(
        name="Ubuntu 18.04 x86_64 Coverage (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in coverage_slaves],
        properties=builder_coverage_properties,
    ),
]

perf_builders = [
    ZFSBuilderConfig(
        name="Ubuntu x86_64 (PERF)",
        factory=perf_factory,
        slavenames=[slave.slavename for slave in performance_slaves],
        properties=builder_perf_properties,
    ),
]

other_builders = \
    builtin_builders + \
    coverage_builders + \
    perf_builders

# All builders
all_builders = \
    arch_builders + \
    test_builders + \
    other_builders

c['slaves'] = all_slaves
c['builders'] = all_builders


####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  For this project all notifications occur via
# a Github webhook.  These can be for branch updates or modifications to
# pull requests (open, reopen, synchronize).  A custom pull request handler
# is used to submit changes for every commit which is part of a pull request.

# The 'protocols' setting contains information about protocols which master
# will use for communicating with slaves.
c['protocols'] = {'pb': {'port': bb_slave_port}}



def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.changes import filter

c['schedulers'] = []

default_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master'},
    'zfs'   : {'repository': zfs_repo, 'branch': 'master'} }

release_2_0_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master'},
    'zfs' : {'repository': zfs_repo, 'branch': 'zfs-2.0-release'}}

release_2_1_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master'},
    'zfs' : {'repository': zfs_repo, 'branch': 'zfs-2.1-release'}}

class CustomSingleBranchScheduler(SingleBranchScheduler):
    kernel_pull_request = None
    zfs_branch = None

    def gotChange(self, change, important):
        pattern = '^Requires-kernel:\s*([a-zA-Z0-9_\-\.\:\/\+\.]+)'
        m = re.search(pattern, change.comments, re.I | re.M)
        if m is not None:
            self.kernel_pull_request = m.group(1)
        else:
            self.kernel_pull_request = None

        if 'branch' in change.properties:
            self.zfs_branch = change.properties['branch']
        else:
            self.zfs_branch = change.branch

        return SingleBranchScheduler.gotChange(self, change, important)

    def getCodebaseDict(self, codebase):
        ss = copy.deepcopy(self.codebases[codebase])
        if codebase == "linux":
            if self.kernel_pull_request is not None:
                ss['branch'] = self.kernel_pull_request
            else:
                tag_override = None
                if os.path.isfile('kernel.tag'):
                    with open('kernel.tag', 'r') as f:
                        tag_override = f.readline()

                if tag_override:
                    ss['branch'] = tag_override.strip()
                    ss['revision'] = None

        return ss

#
# These schedulers are for pull requests and branch pushes.
#

# Architectures
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-arch-scheduler",
    builderNames=[builder.name for builder in arch_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*arch.*")))

# Platforms
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-centos-6-scheduler",
    builderNames=[builder.name for builder in centos_6_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*centos6.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-centos-7-scheduler",
    builderNames=[builder.name for builder in centos_7_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*centos7.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-centos-8-scheduler",
    builderNames=[builder.name for builder in centos_8_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*centos8.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-centosstream-8-scheduler",
    builderNames=[builder.name for builder in centosstream_8_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*centosstream8.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-debian-10-scheduler",
    builderNames=[builder.name for builder in debian_10_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*debian10.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-fedora-33-scheduler",
    builderNames=[builder.name for builder in fedora_35_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*fedora35.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-ubuntu-18-scheduler",
    builderNames=[builder.name for builder in ubuntu_18_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*ubuntu18.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-ubuntu-20-scheduler",
    builderNames=[builder.name for builder in ubuntu_20_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*ubuntu20.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-freebsd-12-scheduler",
    builderNames=[builder.name for builder in freebsd_12_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*freebsd12.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-freebsd-13-scheduler",
    builderNames=[builder.name for builder in freebsd_13_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*freebsd13.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-freebsd-14-scheduler",
    builderNames=[builder.name for builder in freebsd_14_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*freebsd14.*")))

# Other (built-in, coverage, performance, nightly)
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-builtin-scheduler",
    builderNames=[builder.name for builder in builtin_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*builtin.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-coverage-scheduler",
    builderNames=[builder.name for builder in coverage_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*coverage.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-perf-scheduler",
    builderNames=[builder.name for builder in perf_builders],
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*perf.*")))

c['schedulers'].append(Nightly(
    name="nightly-master-branch-scheduler",
    builderNames=[builder.name for builder in nightly_builders],
    branch="master",
    codebases=default_codebases,
    hour=23, minute=00,
    properties={"branch": "master"}))

c['schedulers'].append(Nightly(
    name="nightly-2.0-release-branch-scheduler",
    builderNames=[builder.name for builder in nightly_builders],
    branch="zfs-2.0-release",
    codebases=release_2_0_codebases,
    hour=23, minute=00,
    properties={"branch": "zfs-2.0-release"}))

c['schedulers'].append(Nightly(
    name="nightly-2.1-release-branch-scheduler",
    builderNames=[builder.name for builder in nightly_builders],
    branch="zfs-2.1-release",
    codebases=release_2_1_codebases,
    hour=23, minute=00,
    properties={"branch": "zfs-2.1-release"}))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import status, util

authz_cfg=util.Authz(
    auth=util.BasicAuth(web_userpass),
    gracefulShutdown = False,
    pingBuilder = False,
    pauseSlave = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(http_port=bb_web_port,
    order_console_by_time=True, authz=authz_cfg,
    change_hook_dialects={"github" :
        {"secret"   : github_secret,
         "class"    : CustomGitHubEventHandler },
    }))

#
# Used to post builder status updated to Github.
#
repoOwner = util.Interpolate("%(prop:repoowner)s")
repoName = util.Interpolate("%(prop:reponame)s")
sha = util.Interpolate("%(src:zfs:revision)s")
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = status.GitHubStatus(
    token=github_token,
    repoOwner=repoOwner,
    repoName=repoName,
    sha=sha,
    context=context,
    startDescription='Build started.',
    endDescription='Build done.')

c['status'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OpenZFS"
c['titleURL'] = openzfs_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = web_url

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
