# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from twisted.python import log
from password import *

bb_slave_port = 9989
bb_try_port = 8033
bb_web_port = 8010
bb_master = "build.zfsonlinux.org:9989"
bb_url = "https://raw.githubusercontent.com/zfsonlinux/zfs-buildbot/master/scripts/"
zol_url = "http://zfsonlinux.org"
web_url = "http://build.zfsonlinux.org/"
spl_repo = "https://github.com/zfsonlinux/spl.git"
zfs_repo = "https://github.com/zfsonlinux/zfs.git"
linux_repo = "https://github.com/torvalds/linux.git"
zfs_path = "/usr/libexec/zfs:/usr/share/zfs:/usr/lib/rpm/zfs:/usr/lib/zfs"

all_repositories = {
    "https://github.com/torvalds/linux" : 'linux',
    "https://github.com/zfsonlinux/spl" : 'spl',
    "https://github.com/zfsonlinux/zfs" : 'zfs',
    "https://github.com/torvalds/linux.git" : 'linux',
    "https://github.com/zfsonlinux/spl.git" : 'spl',
    "https://github.com/zfsonlinux/zfs.git" : 'zfs',
}

c = BuildmasterConfig = {}

####### BUILDSLAVES

# An EC2LatentBuildSlave that uses a user-data script for bootstrapping itself.
from buildbot.buildslave.ec2 import EC2LatentBuildSlave
import string
import random
import re

def id_generator(size=24, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def mkEC2UserDataSlave(name, ami, **kwargs):
    instance_type="t2.micro"
    region="us-west-2"
    placement="a"
    spot_instance=False
    max_spot_price=0.05
    price_multiplier=1.15
    security_name="ZFSBuilder"
    password = id_generator()
    user_data = """#!/bin/bash
set -e
set -x
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# Ensure wget is available for runurl
if ! hash wget 2>/dev/null; then
    if hash apt-get 2>/dev/null; then
        apt-get --quiet --yes install wget
    elif hash dnf 2>/dev/null; then
        echo "keepcache=true"     >>/etc/dnf/dnf.conf
        echo "deltarpm=true"      >>/etc/dnf/dnf.conf
        echo "fastestmirror=true" >>/etc/dnf/dnf.conf
        dnf clean all
        dnf --quiet -y install wget
    elif hash yum 2>/dev/null; then
        yum --quiet -y install wget
    else
        echo "Unknown package managed cannot install wget"
    fi
fi

# Get the runurl utility.
wget -qO/usr/bin/runurl """ + bb_url + """runurl
chmod 755 /usr/bin/runurl

# Run the bootstrap script
export BB_MASTER='""" + bb_master + """'
export BB_NAME='""" + name + """'
export BB_PASSWORD='""" + password + """'
runurl """ + bb_url + """bb-bootstrap.sh
"""

    for key in kwargs:
        if key=="instance_type":
            instance_type=kwargs[key]
        if key=="build_wait_timeout":
            build_wait_timeout=kwargs[key]
        if key=="spot_instance":
            spot_instance=kwargs[key]
        if key=="max_spot_price":
            max_spot_price=kwargs[key]
        if key=="price_multiplier":
            price_multiplier=kwargs[key]
        if key=="placement":
            placement=kwargs[key]


    return EC2LatentBuildSlave(
        name, password, instance_type, ami=ami,
        valid_ami_owners=None, valid_ami_location_regex=None, elastic_ip=None,
        identifier=ec2_default_access, secret_identifier=ec2_default_secret,
        aws_id_file_path=None, user_data=user_data, region=region,
        keypair_name=ec2_default_keypair_name, security_name=security_name,
        max_builds=1, notify_on_missing=[], missing_timeout=60 * 20,
        build_wait_timeout=build_wait_timeout, properties={}, locks=None,
        spot_instance=spot_instance, max_spot_price=max_spot_price, volumes=[],
        placement=placement, price_multiplier=price_multiplier,
        tags={
            "ENV"      : "DEV",
            "Name"     : "ZFSBuilder",
            "ORG"      : "COMP",
            "OWNER"    : "behlendorf1",
            "PLATFORM" : name,
            "PROJECT"  : "ZFS",
        })

# The 'slaves' are logically split in to 'build slaves' and 'test slaves'.
#
# Build slaves:
# - May NOT modify the configuration of the system by installing packages
#   (other than required dependencies) or modifying configuration files.
# - May NOT save build products outside the default build area:
#   /var/lib/buildbot/slaves/zfs/BUILDER/build/.
# - May NOT always be destroyed and recreated between builds.
#
# Test slaves:
# - May ALWAYS modify the configuration of the system by installing packages
#   and modifying configuration files.
# - Will ALWAYS be destroyed and recreated from an AMI between builds.

# Create a standard persistent long running build slave.
def mkBuildSlave(name, **kwargs):
    return BuildSlave(name, slave_userpass[name], **kwargs)

# Create an EC2 latent build slave.
def mkEC2BuildSlave(name, ami, **kwargs):
    return mkEC2UserDataSlave(name, ami, build_wait_timeout=30 * 60,
        instance_type="t2.micro", spot_instance=False, **kwargs)

# Create an EC2 latent test slave.
def mkEC2TestSlave(name, ami, **kwargs):
    return mkEC2UserDataSlave(name, ami, build_wait_timeout=0,
        instance_type="m4.xlarge", spot_instance=True, max_spot_price=0.05,
        price_multiplier=1.15, **kwargs)

from buildbot.buildslave import BuildSlave
c['slaves'] = [
    # Build distributions
    mkEC2BuildSlave("Amazon-2015.09-x86_64-buildslave", "ami-9ff7e8af"),
    mkEC2BuildSlave("CentOS-6.7-x86_64-buildslave",     "ami-4d5d577d"),
    mkEC2BuildSlave("CentOS-7.1-x86_64-buildslave",     "ami-71c3f941"),
    mkEC2BuildSlave("Debian-8-x86_64-buildslave",       "ami-0d5b6c3d"),
    mkEC2BuildSlave("Fedora-23-x86_64-buildslave",      "ami-044ba837"),
    mkEC2BuildSlave("Ubuntu-12.04-x86_64-buildslave",   "ami-155a6125"),
    mkEC2BuildSlave("Ubuntu-14.04-x86_64-buildslave",   "ami-5189a661"),

    # Build architectures
    mkBuildSlave("Ubuntu-14.04-i686-buildslave"),
    mkBuildSlave("Debian-8-arm-buildslave"),

    # Test kernels (HVM AMIs only)
    mkEC2TestSlave("Amazon-2015.09-x86_64-testslave",   "ami-9ff7e8af"),
    mkEC2TestSlave("CentOS-6.7-x86_64-testslave",       "ami-4d5d577d"),
    mkEC2TestSlave("CentOS-7.1-x86_64-testslave",       "ami-71c3f941"),
    mkEC2TestSlave("Debian-8-x86_64-testslave",         "ami-0d5b6c3d"),
    mkEC2TestSlave("Ubuntu-14.04-x86_64-testslave",     "ami-5189a661"),
]

# The 'protocols' setting contains information about protocols which master
# will use for communicating with slaves.
c['protocols'] = {'pb': {'port': bb_slave_port}}

####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  For this project all notifications occur via
# a Github webhook.  These can be for branch updates or modifications to
# pull requests (open, reopen, synchronize).  A custom pull request handler
# is used to submit changes for every commit which is part of a pull request.

import logging
import urllib2
import json

from buildbot.status.web.hooks.github import GitHubEventHandler
from dateutil.parser import parse as dateparse
from twisted.python import log

def query_url(url, token=None):
    log.msg("Making request to '%s'" % url)
    request = urllib2.Request(url)
    if token:
        request.add_header("Authorization", "token %s" % token)
    response = urllib2.urlopen(request)
    return json.loads(response.read())

def parse_link_header(link_header):
    links = {}
    prog = re.compile('^<([^>]*)>; rel="([^"]*)"$')
    for s in link_header.split(", "):
        m = prog.search(s)
        if m:
            links[m.group(2)] = m.group(1)
        else:
            raise RuntimeError("Could not parse '%s'" % s)
    return links

class CustomGitHubEventHandler(GitHubEventHandler):
    def handle_pull_request(self, payload):
        changes = []
        number = payload['number']
        refname = 'refs/pull/%d/head' % (number,)
        commits_num = payload['pull_request']['commits']
        commits_url = payload['pull_request']['commits_url']
        created_at = dateparse(payload['pull_request']['created_at'])
        commits_cur = 0

        log.msg('Processing GitHub PR #%d' % number, logLevel=logging.DEBUG)

        action = payload.get('action')
        if action not in ('opened', 'reopened', 'synchronize'):
            log.msg("GitHub PR #%d %s, ignoring" % (number, action))
            return changes, 'git'

        commits = query_url(commits_url, token=github_token)

        # Extract any dependency information and translate to a standard form.
        # Requires-spl: refs/pull/PR/head
        spl_pull_request = None
        pattern = '^Requires-spl:\s*([a-zA-Z0-9_\-\:\/\+]+)'
        for commit in commits:
            comments = commit['commit']['message']
            m = re.search(pattern, comments, re.I | re.M)
            if m is not None:
                spl_pull_request = 'Requires-spl: %s' % m.group(1)
                break

        for commit in commits:
            commit = query_url(commit['url'], token=github_token)
            commits_cur += 1

            # Assemble the list of modified files.
            changed_files = []
            for f in commit['files']:
                changed_files.append(f['filename'])

            # Annotate the head commit to allow special handling.
            if commit['sha'] == payload['pull_request']['head']['sha']:
                category = "build,test"
            else:
                category = "build"

            # Annotate every commit with 'Requires-spl' when missing.
            comments = commit['commit']['message'] + "\n\n"
            if spl_pull_request:
                if re.search(pattern, comments, re.I | re.M) is None:
                    comments = comments + spl_pull_request + "\n"

            comments = comments + "Pull-request: #%d part %d/%d\n" % (
                number, commits_cur, commits_num)

            change = {
                'revision' : commit['sha'],
                'when_timestamp': created_at,
                'branch': refname,
                'revlink' : commit['html_url'],
                'repository': payload['repository']['clone_url'],
                'project' : payload['repository']['name'],
                'category': category,
                'author': "%s <%s>" % (commit['commit']['committer']['name'],
                                       commit['commit']['committer']['email']),
                'comments' : comments,
                'files' : changed_files,
            }

            if callable(self._codebase):
                change['codebase'] = self._codebase(payload)
            elif self._codebase is not None:
                change['codebase'] = self._codebase

            changes.append(change)

        log.msg("Received %d changes from GitHub Pull Request #%d" % (
            len(changes), number))
        return changes, 'git'

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.trysched import Try_Userpass
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.changes import filter

build_builders = [
    # Build distributions
    "Amazon 2015.09 x86_64 (BUILD)",
    "CentOS 6.7 x86_64 (BUILD)",
    "CentOS 7.1 x86_64 (BUILD)",
    "Debian 8 x86_64 (BUILD)",
    "Fedora 23 x86_64 (BUILD)",
    "Kernel.org Default x86_64 (BUILD)",
    "Kernel.org Built-in x86_64 (BUILD)",
    "Ubuntu 12.04 x86_64 (BUILD)",
    "Ubuntu 14.04 x86_64 (BUILD)",

    # Build architectures
    "Ubuntu 14.04 i686 (BUILD)",
    "Debian 8 arm (BUILD)",
]

test_builders = [
    # Test distribution / kernel
    "Amazon 2015.09 x86_64 (TEST)",
    "CentOS 6.7 x86_64 (TEST)",
    "CentOS 7.1 x86_64 (TEST)",
    "Debian 8 x86_64 (TEST)",
    "Ubuntu 14.04 x86_64 (TEST)",
]

c['schedulers'] = []

default_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master', 'revision': None},
    'spl'   : {'repository': spl_repo, 'branch': 'master', 'revision': None},
    'zfs'   : {'repository': zfs_repo, 'branch': 'master', 'revision': None} }

class CustomSingleBranchScheduler(SingleBranchScheduler):
    spl_pull_request = None

    def gotChange(self, change, important):
        pattern = '^Requires-spl:\s*([a-zA-Z0-9_\-\:\/\+]+)'
        m = re.search(pattern, change.comments, re.I | re.M)
        if m is not None:
            self.spl_pull_request = m.group(1)
        else:
            self.spl_pull_request = None

        return SingleBranchScheduler.gotChange(self, change, important)

    def getCodebaseDict(self, codebase):
        ss = self.codebases[codebase]
        if codebase == "spl":
            if self.spl_pull_request is not None:
                ss['branch'] = self.spl_pull_request

        return ss

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-scheduler",
    builderNames=build_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*build.*")))

# This scheduler is for pull requests.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-test-scheduler",
    builderNames=test_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*test.*")))

# This scheduler is for pushes to branches.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="branch-scheduler",
    builderNames=build_builders + test_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(project_re=".*/zfs.*")))

# This allows for 'buildbot try' users.
c['schedulers'].append(Try_Userpass(
    name="try-scheduler",
    port=bb_try_port,
    builderNames=build_builders + test_builders,
    userpass=try_userpass))

####### FACTORIES

from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.status.results import SUCCESS
from buildbot.status.results import FAILURE
from buildbot.status.results import WARNINGS
from buildbot.status.results import SKIPPED

#
# Perform a local in-tree build using the default options.  This is
# solely for the purpose of ensuring we don't break the build.
#

def do_step_build(step, name):
    props = step.build.getProperties()
    if props.hasProperty(name) and props[name] == "yes":
        return True
    else:
        return False

def do_step_build_linux(step):
    return do_step_build(step, 'buildlinux')

def do_step_build_spl(step):
    return do_step_build(step, 'buildspl')

def do_step_build_zfs(step):
    return do_step_build(step, 'buildzfs')

build_factory = util.BuildFactory()

build_factory.addStep(ShellCommand(
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))

build_factory.addStep(Git(repourl=linux_repo, workdir="build/linux",
    mode="full", method="clobber", shallow=True, codebase="linux",
    logEnviron=False, getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    description=["cloning"], descriptionDone=["cloned"]))
build_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, getDescription=True,
    description=["cloning"], descriptionDone=["cloned"]))

build_factory.addStep(ShellCommand(
    workdir="build/linux",
    env={ "LINUX_BUILTIN" : util.Interpolate('%(prop:builtin:-no)s') },
    command=["runurl", bb_url + "bb-build-linux.sh"],
    haltOnFailure=True, logEnviron=False,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              ".config"    : { "filename" : ".config",       "follow" : False},
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building linux"], descriptionDone=["built linux"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/spl",
    env={ "LINUX_CUSTOM" : util.Interpolate('%(prop:buildlinux:-no)s') },
    command=["runurl", bb_url + "bb-build-zfs.sh"],
    haltOnFailure=True, logEnviron=False,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"],
    doStepIf = do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/zfs",
    env={ "LINUX_CUSTOM" : util.Interpolate('%(prop:buildlinux:-no)s') },
    command=["runurl", bb_url + "bb-build-zfs.sh"],
    haltOnFailure=True, logEnviron=False,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))

build_factory.addStep(ShellCommand(command=["make", "checkstyle"],
    workdir="build/zfs", logEnviron=False,
    haltOnFailure=False, flunkOnWarnings=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking style"], descriptionDone=["checked style"]))

#
# Perform a package build with debugging enabled, install the packages,
# and run of the test suite.  The tests themselves have been seperated from
# the buildbot configuration to minimize the need for restarting the  master.
#
test_factory = util.BuildFactory()

test_factory.addStep(ShellCommand(
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
test_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    description=["cloning"], descriptionDone=["cloned"]))
test_factory.addStep(ShellCommand(
    workdir="build/spl",
    command=["runurl", bb_url + "bb-build-packages.sh"],
    haltOnFailure=True, logEnviron=False,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"]))
test_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, getDescription=True,
    description=["cloning"], descriptionDone=["cloned"]))
test_factory.addStep(ShellCommand(
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build-packages.sh"],
    haltOnFailure=True, logEnviron=False,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"]))

# Test suites
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=120, sigtermTime=30, logEnviron=False,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/splat",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-splat.sh"],
    haltOnFailure=False, maxTime=600, sigtermTime=30, logEnviron=False,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["splat"], descriptionDone=["splat"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/ztest",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-ztest.sh"],
    haltOnFailure=False, maxTime=14400, sigtermTime=30, logEnviron=False,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["ztest"], descriptionDone=["ztest"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/ziltest",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-ziltest.sh"],
    haltOnFailure=False, maxTime=120, sigtermTime=30, logEnviron=False,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["ziltest"], descriptionDone=["ziltest"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zconfig",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-zconfig.sh"],
    haltOnFailure=False, maxTime=600, sigtermTime=30, logEnviron=False,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zconfig"], descriptionDone=["zconfig"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zimport",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-zimport.sh"],
    haltOnFailure=False, maxTime=1200, sigtermTime=30, logEnviron=False,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zimport"], descriptionDone=["zimport"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/filebench",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-filebench.sh"],
    haltOnFailure=False, maxTime=3600, sigtermTime=30, logEnviron=False,
    logfiles={"configure" : { "filename" : "configure.log", "follow" : True },
              "make"      : { "filename" : "make.log",      "follow" : True },
              "console"   : { "filename" : "console.log",   "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["filebench"], descriptionDone=["filebench"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/xfstests",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-xfstests.sh"],
    haltOnFailure=False, maxTime=1200, sigtermTime=30, logEnviron=False,
    logfiles={"configure" : { "filename" : "configure.log", "follow" : True },
              "make"      : { "filename" : "make.log",      "follow" : True },
              "console"   : { "filename" : "console.log",   "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["xfstest"], descriptionDone=["xfstests"]))
test_factory.addStep(ShellCommand(
    workdir="build/tests/zfsstress",
    env={'PATH': zfs_path + ":${PATH}"},
    command=["runurl", bb_url + "bb-test-zfsstress.sh"],
    haltOnFailure=False, maxTime=14400, sigtermTime=30, logEnviron=False,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfsstress"], descriptionDone=["zfsstress"]))

test_factory.addStep(ShellCommand(command=["runurl", bb_url + "bb-cleanup.sh"],
    haltOnFailure=False, logEnviron=False,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["removing zfs"], descriptionDone=["removed zfs"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which slaves can execute them.  Note
# that any particular build will only take place on one slave.

builder_default_properties = {
    "buildlinux":    "no",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
}

builder_linux_default_properties = {
    "buildlinux":    "yes",
    "buildspl":      "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
}

builder_linux_builtin_properties = {
    "buildlinux":    "yes",
    "buildspl":      "no",
    "buildzfs":      "no",
    "builtin":       "yes",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
}

def prioritizeBuilders(buildmaster, builders):
    """
    Called by the buildmaster to prioritize the builders.  Returns a sorted
    array of builders designed to improve ec2 utilization of substantiated but
    idle buildslaves.  Builders with pending builds and idle buildslaves are
    given priority.  This helps keep all buildslaves busy while new latent
    buildslaves are bootstrapped, a process which can take several minutes.
    """

    sorted_builders = []
    for b in builders:
        idle = False
        for s in b.slaves:
            if s.isIdle():
               idle = True
               break

        # Prioritize BUILD over TEST builders.
        if idle is True and re.search('BUILD', b.name):
            sorted_builders.insert(0, b)
        else:
            sorted_builders.append(b)

    log.msg("prioritized %i builder(s): %s" % (len(sorted_builders),
        [b.name for b in sorted_builders]))

    return sorted_builders

c['prioritizeBuilders'] = prioritizeBuilders

build_distro_tags = [ "Distributions" ]
build_arch_tags = [ "Architectures" ]
test_tags = [ "Tests" ]

c['builders'] = [
    # Build distributions
    util.BuilderConfig(name="Amazon 2015.09 x86_64 (BUILD)",
        slavenames=["Amazon-2015.09-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Kernel.org Default x86_64 (BUILD)",
        slavenames=["Amazon-2015.09-x86_64-buildslave"], factory=build_factory,
        properties=builder_linux_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Kernel.org Built-in x86_64 (BUILD)",
        slavenames=["Amazon-2015.09-x86_64-buildslave"], factory=build_factory,
        properties=builder_linux_builtin_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Debian 8 x86_64 (BUILD)",
        slavenames=["Debian-8-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Fedora 23 x86_64 (BUILD)",
        slavenames=["Fedora-23-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="CentOS 6.7 x86_64 (BUILD)",
        slavenames=["CentOS-6.7-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="CentOS 7.1 x86_64 (BUILD)",
        slavenames=["CentOS-7.1-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Ubuntu 12.04 x86_64 (BUILD)",
        slavenames=["Ubuntu-12.04-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Ubuntu 14.04 x86_64 (BUILD)",
        slavenames=["Ubuntu-14.04-x86_64-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_distro_tags,
        mergeRequests=False),

    # Build architectures
    util.BuilderConfig(name="Ubuntu 14.04 i686 (BUILD)",
        slavenames=["Ubuntu-14.04-i686-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_arch_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Debian 8 arm (BUILD)",
        slavenames=["Debian-8-arm-buildslave"], factory=build_factory,
        properties=builder_default_properties, tags=build_arch_tags,
        mergeRequests=False),

    # Test distribution / kernel
    util.BuilderConfig(name="Amazon 2015.09 x86_64 (TEST)",
        slavenames=["Amazon-2015.09-x86_64-testslave"], factory=test_factory,
        properties=builder_default_properties, tags=test_tags,
        mergeRequests=False),
    util.BuilderConfig(name="CentOS 6.7 x86_64 (TEST)",
        slavenames=["CentOS-6.7-x86_64-testslave"], factory=test_factory,
        properties=builder_default_properties, tags=test_tags,
        mergeRequests=False),
    util.BuilderConfig(name="CentOS 7.1 x86_64 (TEST)",
        slavenames=["CentOS-7.1-x86_64-testslave"], factory=test_factory,
        properties=builder_default_properties, tags=test_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Debian 8 x86_64 (TEST)",
        slavenames=["Debian-8-x86_64-testslave"], factory=test_factory,
        properties=builder_default_properties, tags=test_tags,
        mergeRequests=False),
    util.BuilderConfig(name="Ubuntu 14.04 x86_64 (TEST)",
        slavenames=["Ubuntu-14.04-x86_64-testslave"], factory=test_factory,
        properties=builder_default_properties, tags=test_tags,
        mergeRequests=False),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import status, util

authz_cfg=util.Authz(
    auth=util.BasicAuth(web_userpass),
    gracefulShutdown = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(http_port=bb_web_port, authz=authz_cfg,
    change_hook_dialects={"github" :
        {"secret"   : github_secret,
         "class"    : CustomGitHubEventHandler },
    }))

#
# Used to post builder status updated to Github.
#
repoOwner = util.Interpolate("%(prop:repoowner)s")
repoName = util.Interpolate("%(prop:reponame)s")
sha = util.Interpolate("%(src:zfs:revision)s")
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = status.GitHubStatus(
    token=github_token,
    repoOwner=repoOwner,
    repoName=repoName,
    sha=sha,
    context=context,
    startDescription='Build started.',
    endDescription='Build done.')

c['status'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ZFS on Linux"
c['titleURL'] = zol_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = web_url

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
