# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from twisted.python import log
from password import *
from repository import *
from github import *
from buildslaves import *
from buildbot.buildslave import BuildSlave
from buildbot.plugins import util
from buildbot.schedulers.timed import Nightly

import os.path
import copy
import re

bb_slave_port = 9989
bb_web_port = 8010
bb_master = "build.zfsonlinux.org:9989"
bb_url = "https://raw.githubusercontent.com/zfsonlinux/zfs-buildbot/master/scripts/"
zol_url = "http://zfsonlinux.org"
web_url = "http://build.zfsonlinux.org/"
zfs_path = "/usr/libexec/zfs:/usr/share/zfs:/usr/lib/rpm/zfs:/usr/lib/zfs"
bin_path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

c = BuildmasterConfig = {}

c['caches'] = {
    'Changes' : 100,
    'Builds' : 20,
    'chdicts' : 100,
    'BuildRequests' : 10,
    'SourceStamps' : 10,
    'ssdicts' : 20,
    'objectids' : 10,
    'usdicts' : 10,
}

# Keep all changes and the last 20,000 build results per builder.  Only keep
# detailed build logs for the last 2000 builds for each builder (approximately
# the last 6 months of builds).  Individual log files are limited to 10M.
c['changeHorizon'] = 0
c['buildHorizon'] = 20000
c['logHorizon'] = 2000
c['logMaxSize'] = 10*1024*1024 # 10M
c['logMaxTailSize'] = 32768

####### BUILD FACTORIES

# A builder also has a BuildFactory, which is responsible for creating new
# Build instances: because the Build instance is what actually performs each
# build, choosing the BuildFactory is the way to specify what happens each
# time a build is done (Builds).

from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.status.results import SUCCESS
from buildbot.status.results import FAILURE
from buildbot.status.results import WARNINGS
from buildbot.status.results import SKIPPED

def do_step_build(step, name):
    props = step.build.getProperties()

    override_name = 'override-' + name
    if props.hasProperty(override_name):
        m = re.match(r".*yes.*", props[override_name])
        if m is not None:
            return True
        else:
            return False

    if props.hasProperty(name):
        m = re.match(r".*yes.*", props[name])
        if m is not None:
            return True
        else:
            return False
    else:
        return False

def do_step_build_linux(step):
    return do_step_build(step, 'buildlinux')

def do_step_build_lustre(step):
    return do_step_build(step, 'buildlustre')

def do_step_build_spl(step):
    return do_step_build(step, 'buildspl')

def do_step_build_zfs(step):
    return do_step_build(step, 'buildzfs')

def perform_spl_build(step):
    return do_step_build_spl(step) and not do_step_build(step, 'builtin')

def perform_zfs_build(step):
    return do_step_build_zfs(step) and not do_step_build(step, 'builtin')

def do_step_check_lint(step):
    return do_step_build(step, 'checklint')

def do_step_perf_pts(step):
    return do_step_build(step, 'perfpts')

def do_step_perf_zts(step):
    return do_step_build(step, 'perfzts')

def determine_prop(props, name, default):
    override_name = 'override-' + name
    if props.hasProperty(override_name):
        return props[override_name]

    if props.hasProperty(name):
        return props[name]

    return default

@util.renderer
def get_buildlinux(props):
    return determine_prop(props, 'buildlinux', 'no')

@util.renderer
def get_builtin(props):
    return determine_prop(props, 'builtin', 'no')

@util.renderer
def get_configlustre(props):
    return determine_prop(props, 'configlustre', '')

@util.renderer
def get_configspl(props):
    return determine_prop(props, 'configspl', '')

@util.renderer
def get_configzfs(props):
    return determine_prop(props, 'configzfs', '')

@util.renderer
def get_install(props):
    return determine_prop(props, 'install', 'none')

@util.renderer
def get_version(props):
    return props.getProperty('commit-description')['zfs']

@util.renderer
def get_branch_or_pr(props):
    if props.hasProperty('pr_number'):
        return 'artifacts/pull/' + props.getProperty('pr_number')
    elif props.hasProperty('branch'):
        return 'artifacts/branch/' + props.getProperty('branch')
    else:
        return 'artifacts/branch/none'

#
# Build factory - Build source in-tree
#
# Perform an in-tree build using the default options.  This is used to verify
# the build accross a range of distributions and architectures.
#
style_factory = util.BuildFactory()

style_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
style_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"]))
style_factory.addStep(ShellCommand(
    workdir="build/zfs", env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : '--with-config=srpm',
        'INSTALL_METHOD' : 'none',
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"]))
style_factory.addStep(ShellCommand(command=["make", "checkstyle"],
    env={'PATH' : bin_path},
    workdir="build/zfs", logEnviron=False,
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking style"], descriptionDone=["checked style"]))
style_factory.addStep(ShellCommand(command=["make", "lint"],
    env={'PATH' : bin_path},
    workdir="build/zfs", logEnviron=False,
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking lint"], descriptionDone=["checked lint"],
    doStepIf = do_step_check_lint,
    hideStepIf=lambda results, s: results==SKIPPED))

build_factory = util.BuildFactory()

build_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
build_factory.addStep(Git(repourl=linux_repo, workdir="build/linux",
    mode="full", method="clobber", shallow=True, codebase="linux",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(Git(repourl=lustre_repo, workdir="build/lustre",
    mode="full", method="clobber", codebase="lustre",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_lustre,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/linux", env={'PATH' : bin_path,
        'LINUX_BUILTIN' : util.Interpolate('%(kw:p)s', p=get_builtin),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build-linux.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              ".config"    : { "filename" : ".config",       "follow" : False },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "config.spl.log" :
                  { "filename" : "../spl/config.log", "follow" : True },
              "config.zfs.log" :
                  { "filename" : "../zfs/config.log", "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building linux"], descriptionDone=["built linux"],
    doStepIf = do_step_build_linux,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/spl", env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configspl),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : 'none',
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"],
    doStepIf = perform_spl_build,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/zfs", env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configzfs),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : 'none',
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf = perform_zfs_build,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(command=["make", "lint"],
    workdir="build/zfs", logEnviron=False, env={'PATH' : bin_path},
    haltOnFailure=False, flunkOnWarnings=True,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["checking lint"], descriptionDone=["checked lint"],
    doStepIf = do_step_check_lint,
    hideStepIf=lambda results, s: results==SKIPPED))
build_factory.addStep(ShellCommand(
    workdir="build/lustre", env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(prop:configlustre:-"")s'),
        'LINUX_CUSTOM' : util.Interpolate('%(prop:buildlinux:-no)s'),
        'INSTALL_METHOD' : 'none',
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building lustre"], descriptionDone=["built lustre"],
    doStepIf = do_step_build_lustre,
    hideStepIf=lambda results, s: results==SKIPPED))

#
# Test factory - Build packages and run the test suites.
#
# Perform a package build with debugging enabled, install the packages,
# and run of the test suite.  The tests themselves have been seperated from
# the buildbot configuration to minimize the need for restarting the master.
#
test_factory = util.BuildFactory()

test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
test_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(Git(repourl=lustre_repo, workdir="build/lustre",
    mode="full", method="clobber", codebase="lustre",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf = do_step_build_lustre,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configspl),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    workdir="build/spl",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"],
    doStepIf = do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configzfs),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf = do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configlustre),
        'LINUX_CUSTOM' : util.Interpolate('%(kw:p)s', p=get_buildlinux),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'MAKE_TARGETS_KMOD' : 'rpms' },
    workdir="build/lustre",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building lustre"], descriptionDone=["built lustre"],
    doStepIf = do_step_build_lustre,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'TEST_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=120, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"],
    alwaysRun=True))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path },
    command=["runurl", bb_url + "bb-test-splat.sh"],
    haltOnFailure=False, maxTime=600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["splat"], descriptionDone=["splat"],
    hideStepIf=lambda results, s: results==SKIPPED))
#test_factory.addStep(ShellCommand(
#    workdir="build/tests",
#    env={'PATH' : bin_path + ":" + zfs_path },
#    command=["runurl", bb_url + "bb-test-lustre.sh"],
#    haltOnFailure=False, maxTime=600, sigtermTime=30, logEnviron=False,
#    lazylogfiles=True,
#    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
#    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
#    description=["lustre"], descriptionDone=["lustre"],
#    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-ztest.sh"],
    haltOnFailure=False, maxTime=14400, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"ztest.out" : { "filename" : "ztest.out" },
              "ztest.history" : { "filename" : "ztest.history" },
              "1.ztest.out" : { "filename" : "ztest.core.1/ztest.out" },
              "1.ztest.history" : { "filename" : "ztest.core.1/ztest.history" },
              "1.ztest.zdb" : { "filename" : "ztest.core.1/ztest.zdb" },
              "1.ztest.gdb" : { "filename" : "ztest.core.1/ztest.gdb" },
              "2.ztest.out" : { "filename" : "ztest.core.2/ztest.out" },
              "2.ztest.history" : { "filename" : "ztest.core.2/ztest.history" },
              "2.ztest.zdb" : { "filename" : "ztest.core.2/ztest.zdb" },
              "2.ztest.gdb" : { "filename" : "ztest.core.2/ztest.gdb" },
              "3.ztest.out" : { "filename" : "ztest.core.3/ztest.out" },
              "3.ztest.history" : { "filename" : "ztest.core.3/ztest.history" },
              "3.ztest.zdb" : { "filename" : "ztest.core.3/ztest.zdb" },
              "3.ztest.gdb" : { "filename" : "ztest.core.3/ztest.gdb" }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["ztest"], descriptionDone=["ztest"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-zimport.sh"],
    haltOnFailure=False, maxTime=1200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console" : { "filename" : "console.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zimport"], descriptionDone=["zimport"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-xfstests.sh"],
    haltOnFailure=False, flunkOnWarnings=True,
    maxTime=1200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure" : { "filename" : "configure.log", "follow" : True },
              "make"      : { "filename" : "make.log",      "follow" : True },
              "console"   : { "filename" : "console.log",   "follow" : False },
              "kmemleak"  : { "filename" : "kmemleak.log",  "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["xfstest"], descriptionDone=["xfstests"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'DEFAULT_ZFSTESTS_TAGS' : 'functional'},
    command=["runurl", bb_url + "bb-test-zfstests.sh"],
    haltOnFailure=False, flunkOnWarnings=True,
    maxTime=36000, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=4200,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : True },
              "summary"  : { "filename" : "summary.log",  "follow" : False },
              "tests"    : { "filename" : "test.log",     "follow" : True },
              "log"      : { "filename" : "full.log",     "follow" : True },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfstests"], descriptionDone=["zfstests"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-zfsstress.sh"],
    haltOnFailure=False, flunkOnWarnings=True,
    maxTime=14400, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : False },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfsstress"], descriptionDone=["zfsstress"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'ZFS_VERSION' : util.Interpolate('%(kw:p)s', p=get_version),
        'CODECOV_TOKEN' : codecov_token,
        'ZFS_REVISION' : util.Interpolate("%(src:zfs:revision)s"),
        'BASE_BRANCH' : util.Interpolate("%(src:zfs:branch)s"),
        'PR_NUMBER' : util.Interpolate("%(prop:pr_number)s"),
        'BUILDER_NAME' : util.Interpolate("%(prop:buildername)s"),
        'BUILD_NUMBER' : util.Interpolate("%(prop:buildnumber)s") },
    command=["runurl", bb_url + "bb-test-cleanup.sh"],
    haltOnFailure=False, maxTime=1800, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"coverage-user"   : { "filename" : "coverage-user.tar.xz",   "follow" : False },
              "coverage-kernel" : { "filename" : "coverage-kernel.tar.xz", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["analysis"], descriptionDone=["analysis"],
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(DirectoryUpload(
    slavesrc=util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    masterdest=util.Interpolate("public_html/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    url=util.Interpolate("%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    alwaysRun=True))
test_factory.addStep(ShellCommand(command=["runurl", bb_url + "bb-cleanup.sh"],
    env={'PATH' : bin_path, 'BUILT_PACKAGE' : 'zfs'},
    haltOnFailure=False, logEnviron=False,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["removing zfs"], descriptionDone=["removed zfs"],
    doStepIf=do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
test_factory.addStep(ShellCommand(command=["runurl", bb_url + "bb-cleanup.sh"],
    env={'PATH' : bin_path, 'BUILT_PACKAGE' : 'spl'},
    haltOnFailure=False, logEnviron=False,
    lazylogfiles=True,
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["removing spl"], descriptionDone=["removed spl"],
    doStepIf=do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))

#
# Performance factory - Build packages and run the performance suite.
#
# Perform a package build with debugging disabled, install the packages,
# and run a battery of performance tests.  The tests themselves have been
# seperated from the buildbot configuration to minimize the need for
# restarting the master.
#
perf_factory = util.BuildFactory()

perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path},
    command=["runurl", bb_url + "bb-dependencies.sh"],
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    description=["installing dependencies"],
    descriptionDone=["installed dependencies"]))
perf_factory.addStep(Git(repourl=spl_repo, workdir="build/spl",
    mode="full", method="clobber", codebase="spl",
    logEnviron=False, getDescription=True,
    lazylogfiles=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf=do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(Git(repourl=zfs_repo, workdir="build/zfs",
    mode="full", method="clobber", codebase="zfs",
    logEnviron=False, lazylogfiles=True,
    getDescription=True,
    description=["cloning"], descriptionDone=["cloned"],
    doStepIf=do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configspl),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    workdir="build/spl",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building spl"], descriptionDone=["built spl"],
    doStepIf=do_step_build_spl,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    env={'PATH' : bin_path,
        'CONFIG_OPTIONS' : util.Interpolate('%(kw:p)s', p=get_configzfs),
        'INSTALL_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    workdir="build/zfs",
    command=["runurl", bb_url + "bb-build.sh"],
    haltOnFailure=True, logEnviron=False,
    lazylogfiles=True,
    logfiles={"configure"  : { "filename" : "configure.log", "follow" : True },
              "config.log" : { "filename" : "config.log",    "follow" : True },
              "make"       : { "filename" : "make.log",      "follow" : True },
              "install"    : { "filename" : "install.log",   "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["building zfs"], descriptionDone=["built zfs"],
    doStepIf=do_step_build_zfs,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'TEST_METHOD' : util.Interpolate('%(kw:p)s', p=get_install),
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version) },
    command=["runurl", bb_url + "bb-test-prepare.sh"],
    haltOnFailure=False, maxTime=3600, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=3600,
    logfiles={"test"     : { "filename" : "TEST",        "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["preparing env"], descriptionDone=["prepared env"],
    alwaysRun=True))
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'ZFS_VERSION' : util.Interpolate('%(kw:p)s', p=get_version) },
    command=["runurl", bb_url + "bb-test-pts.sh"],
    haltOnFailure=False, maxTime=43200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True,
    logfiles={"config" : { "filename" : "config.log", "follow" : True }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    timeout=5400, description=["pts"], descriptionDone=["pts"],
    doStepIf=do_step_perf_pts,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(ShellCommand(
    workdir="build/tests",
    env={'PATH' : bin_path + ":" + zfs_path,
        'UPLOAD_DIR' : util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
            p=get_branch_or_pr, q=get_version),
        'DEFAULT_ZFSTESTS_RUNFILE' : 'perf-regression',
        'DEFAULT_ZFSTESTS_TAGS' : 'perf',
        'DEFAULT_ZFSTESTS_DISKS' : 'xvdb xvdc xvdd',
        'DEFAULT_ZFSTESTS_DISKSIZE' : '64G'},
    command=["runurl", bb_url + "bb-test-zfstests.sh"],
    haltOnFailure=False, flunkOnWarnings=True,
    maxTime=43200, sigtermTime=30, logEnviron=False,
    lazylogfiles=True, timeout=7200,
    logfiles={"console"  : { "filename" : "console.log",  "follow" : False },
              "summary"  : { "filename" : "summary.log",  "follow" : False },
              "tests"    : { "filename" : "test.log",     "follow" : True },
              "log"      : { "filename" : "full.log",     "follow" : True },
              "kmemleak" : { "filename" : "kmemleak.log", "follow" : False }},
    decodeRC={0 : SUCCESS, 1 : FAILURE, 2 : WARNINGS, 3 : SKIPPED },
    description=["zfstests"], descriptionDone=["zfstests"],
    doStepIf=do_step_perf_zts,
    hideStepIf=lambda results, s: results==SKIPPED))
perf_factory.addStep(DirectoryUpload(
    slavesrc=util.Interpolate("/var/tmp/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    masterdest=util.Interpolate("public_html/%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    url=util.Interpolate("%(kw:p)s/%(kw:q)s",
        p=get_branch_or_pr, q=get_version),
    alwaysRun=True))


####### WORKERS / SLAVES

# Each builder is associated with one of more workers / slaves.  They are
# responsible for carrying out the steps described by a build factory.
# Note that any particular build will only take place on one slave.
#
# Provided by Amazon.
amazon2_ami = "ami-01beb64058d271bc4"	# Amazon 2 11-7-2018

# Provided by CentOS: https://wiki.centos.org/Cloud/AWS
centos6_ami = "ami-ade6e5cd"	# CentOS 6 1-12-2018
centos7_ami = "ami-4826c22b"	# CentOS 7 5-17-2018

# Provided by Debian: https://wiki.debian.org/Cloud/AmazonEC2Image
debian10_ami = "ami-0ed1af421f2a3cf40"	# Debian 10 9-9-2019

# Provided by Fedora: https://alt.fedoraproject.org/cloud/
fedora30_ami = "ami-07a6c6dd9a00e7ad6"	# Fedora 30 05-03-2019

# Provided by Cannonical: https://cloud-images.ubuntu.com/locator/ec2/
ubuntu16_ami = "ami-0b1ecb4f6ec8f417b"	# Ubuntu 16.04 4-5-2018
ubuntu18_ami = "ami-03c9dad75296f9e90"	# Ubuntu 18.04 4-26-2018

# Custom AMIs
coverage_ami =	"ami-a97867c9"	# Ubuntu 17.04 5-2-2018

# Provided by FreeBSD.
# TODO: check for latest AMIs in s3 json blob
def get_freebsd12_image(slave):
    ami = "ami-07f130225299e11de" # FreeBSD/amd64 stable/12 (20191107 r354424)
    return slave.conn.get_image(ami)
def get_freebsd13_image(slave):
    ami = "ami-093acff5f9300f5ba" # FreeBSD/amd64 head (20191107 r354423)
    return slave.conn.get_image(ami)

# Style slaves
numstyleslaves = 2

style_slaves = [
    ZFSEC2StyleSlave(
        name="Ubuntu-17.10-x86_64-styleslave%s" % (str(i+1)),
        ami=coverage_ami
    ) for i in range(0, numstyleslaves)
]

# Build release slaves
numslaves = 2

# Distribution slaves
kernel_builtin_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Amazon-KernelBuiltin-x86_64-buildslave%s" % (str(i+1)),
        ami=amazon2_ami
    ) for i in range(0, numslaves)
]

debian10_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Debian-10-x86_64-buildslave%s" % (str(i+1)),
        ami=debian10_ami
    ) for i in range(0, numslaves)
]

centos6_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="CentOS-6-x86_64-buildslave%s" % (str(i+1)),
        ami=centos6_ami
    ) for i in range(0, numslaves)
]

centos7_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="CentOS-7-x86_64-buildslave%s" % (str(i+1)),
        ami=centos7_ami
    ) for i in range(0, numslaves)
]

ubuntu16_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Ubuntu-16.04-x86_64-buildslave%s" % (str(i+1)),
        ami=ubuntu16_ami
    ) for i in range(0, numslaves)
]

ubuntu18_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Ubuntu-18.04-x86_64-buildslave%s" % (str(i+1)),
        ami=ubuntu18_ami
    ) for i in range(0, numslaves)
]

freebsd12_amd64_slave = [
    ZFSEC2BuildSlave(
        name="FreeBSD-stable/12-amd64-buildslave%s" % (str(i+1)),
        get_image=get_freebsd12_image
    ) for i in range(0, numslaves)
]

freebsd13_amd64_slave = [
    ZFSEC2BuildSlave(
        name="FreeBSD-head-amd64-buildslave%s" % (str(i+1)),
        get_image=get_freebsd13_image
    ) for i in range(0, numslaves)
]

distro_slaves = \
    kernel_builtin_x86_64_slave + \
    debian10_x86_64_slave + \
    centos7_x86_64_slave + \
    ubuntu16_x86_64_slave + \
    ubuntu18_x86_64_slave + \
    freebsd12_amd64_slave + \
    freebsd13_amd64_slave

# Architecture slaves
amazon_x86_64_slave = [
    ZFSEC2BuildSlave(
        name="Amazon-2-x86_64-buildslave%s" % (str(i+1)),
        ami=amazon2_ami
    ) for i in range(0, numslaves)
]

ubuntu16_i386_slave = [
    BuildSlave("Ubuntu-16.04-i386-buildslave1",
        slave_userpass["Ubuntu-16.04-i386-buildslave1"]),
    BuildSlave("Ubuntu-16.04-i386-buildslave2",
        slave_userpass["Ubuntu-16.04-i386-buildslave2"]),
]

debian8_arm_slave = [
    BuildSlave("Debian-8-arm-buildslave1",
        slave_userpass["Debian-8-arm-buildslave1"]),
    BuildSlave("Debian-8-arm-buildslave2",
        slave_userpass["Debian-8-arm-buildslave2"]),
]

ubuntu16_aarch64_slave = [
    BuildSlave("Ubuntu-16.04-aarch64-buildslave1",
        slave_userpass["Ubuntu-16.04-aarch64-buildslave1"]),
    BuildSlave("Ubuntu-16.04-aarch64-buildslave2",
        slave_userpass["Ubuntu-16.04-aarch64-buildslave2"]),
]

debian8_ppc_slave = [
    BuildSlave("Debian-8-ppc-buildslave",
        slave_userpass["Debian-8-ppc-buildslave"]),
]

debian8_ppc64_slave = [
    BuildSlave("Debian-8-ppc64-buildslave1",
        slave_userpass["Debian-8-ppc64-buildslave1"]),
    BuildSlave("Debian-8-ppc64-buildslave2",
        slave_userpass["Debian-8-ppc64-buildslave2"]),
]

arch_slaves = \
    amazon_x86_64_slave + \
    ubuntu16_i386_slave + \
    debian8_arm_slave + \
    ubuntu16_aarch64_slave + \
    debian8_ppc_slave + \
    debian8_ppc64_slave

# Test slaves
numtestslaves = 24
numcoverageslaves = 32

amazon_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Amazon-2-x86_64-testslave%s" % (str(i+1)),
        ami=amazon2_ami
    ) for i in range(0, numtestslaves)
]

centos6_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-6-x86_64-testslave%s" % (str(i+1)),
        ami=centos6_ami
    ) for i in range(0, numtestslaves)
]

centos7_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="CentOS-7-x86_64-testslave%s" % (str(i+1)),
        ami=centos7_ami
    ) for i in range(0, numtestslaves)
]

debian10_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Debian-10-x86_64-testslave%s" % (str(i+1)),
        ami=debian10_ami
    ) for i in range(0, numtestslaves)
]

fedora30_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Fedora-30-x86_64-testslave%s" % (str(i+1)),
        ami=fedora30_ami
    ) for i in range(0, numtestslaves)
]

ubuntu16_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-16.04-x86_64-testslave%s" % (str(i+1)),
        ami=ubuntu16_ami
    ) for i in range(0, numtestslaves)
]

ubuntu18_x86_64_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-18.04-x86_64-testslave%s" % (str(i+1)),
        ami=ubuntu18_ami
    ) for i in range(0, numtestslaves)
]

freebsd12_amd64_testslave = [
    ZFSEC2TestSlave(
        name="FreeBSD-stable/12-amd64-testslave%s" % (str(i+1)),
        get_image=get_freebsd12_image
    ) for i in range(0, numtestslaves)
]

freebsd13_amd64_testslave = [
    ZFSEC2TestSlave(
        name="FreeBSD-head-amd64-testslave%s" % (str(i+1)),
        get_image=get_freebsd13_image
    ) for i in range(0, numtestslaves)
]

test_slaves = \
    amazon_x86_64_testslave + \
    centos7_x86_64_testslave + \
    debian10_x86_64_testslave + \
    fedora30_x86_64_testslave + \
    ubuntu16_x86_64_testslave + \
    ubuntu18_x86_64_testslave + \
    freebsd12_amd64_testslave + \
    freebsd13_amd64_testslave

# Coverage slaves
ubuntu17_x86_64_coverage_testslave = [
    ZFSEC2TestSlave(
        name="Ubuntu-17.04-x86_64-coverage-testslave%s" % (str(i+1)),
        ami=coverage_ami
    ) for i in range(0, numcoverageslaves)
]

coverage_slaves = \
    ubuntu17_x86_64_coverage_testslave

# Performance slaves
numperfslaves = 4

amazon_x86_64_perfslave = [
    ZFSEC2PerfTestSlave(
        name="Amazon-2-x86_64-perfslave%s" % (str(i+1)),
        ami=amazon2_ami
    ) for i in range(0, numperfslaves)
]

perf_slaves = \
    amazon_x86_64_perfslave

# Legacy slaves used for zfs-0.8 testing
legacy_slaves = \
    centos6_x86_64_slave + \
    centos6_x86_64_testslave

# All slaves
all_slaves = \
    style_slaves + \
    distro_slaves + \
    arch_slaves + \
    test_slaves + \
    coverage_slaves + \
    perf_slaves + \
    legacy_slaves

style_tags = [ "Style" ]
build_distro_tags = [ "Distributions" ]
build_arch_tags = [ "Architectures" ]
test_tags = [ "Tests" ]
perf_tags = [ "Performance" ]


####### BUILDERS

# The Buildmaster runs a collection of Builders, each of which handles a single
# type of build (e.g. full versus quick), on one or more workers. Builders
# serve as a kind of queue for a particular type of build. Each Builder gets a
# separate column in the waterfall display. In general, each Builder runs
# independently (although various kinds of interlocks can cause one Builder
# to have an effect on another).

# Properties are used to control how a build is performed.
builder_default_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_coverage_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug --enable-debuginfo --enable-code-coverage",
    "install":       "in-tree",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_lustre_properties = {
    "buildlinux":    "no",
    "buildlustre":   "yes",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "--with-zfs --disable-ldiskfs",
    "configspl":     "--with-spec=redhat",
    "configzfs":     "--with-spec=redhat",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_dkms_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "--with-config=srpm --enable-debug",
    "configzfs":     "--with-config=srpm --enable-debug --enable-debuginfo",
    "install":       "dkms",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_freebsd_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "system",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_redhat_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "--enable-debug --with-spec=redhat",
    "configzfs":     "--enable-debug --enable-debuginfo --with-spec=redhat",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_nodebug_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "",
    "configzfs":     "",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_builtin_properties = {
    "buildlinux":    "yes",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "yes",
    "configlustre":  "",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

builder_style_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "yes",
}

builder_arch_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "--enable-debug",
    "configzfs":     "--enable-debug --enable-debuginfo",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "yes",
}

builder_perf_properties = {
    "buildlinux":    "no",
    "buildlustre":   "no",
    "buildzfs":      "yes",
    "builtin":       "no",
    "configlustre":  "",
    "configspl":     "",
    "configzfs":     "",
    "install":       "packages",
    "repoowner":     "zfsonlinux",
    "reponame":      "zfs",
    "checklint":     "no",
}

def prioritizeBuilders(buildmaster, builders):
    """
    Called by the buildmaster to prioritize the builders.  Returns a sorted
    array of builders designed to improve ec2 utilization. Builders with
    substantiated, idle slaves are given priority. Followed by builders with no
    substantiated slaves. The lowest priority is a builder that is busy.
    This helps keep all buildslaves busy while new latent buildslaves are
    bootstrapped, a process which can take several minutes.
    """

    idle_builders = []
    busy_builders = []
    avail_builders = []

    for b in builders:
        idle = False
        busy = False
        for s in b.slaves:
            if s.isIdle():
               idle = True
               break

            if s.isBusy():
               busy = True

        if idle is True:
            if re.search('BUILD', b.name):
                idle_builders.insert(0, b)
            else:
                idle_builders.append(b)
        elif busy is True:
            if re.search('BUILD', b.name):
                busy_builders.insert(0, b)
            else:
                busy_builders.append(b)
        else:
            if re.search('BUILD', b.name):
                avail_builders.insert(0, b)
            else:
                avail_builders.append(b)

    sorted_builders = idle_builders + avail_builders + busy_builders

    log.msg("prioritized %i builder(s): %s" % (len(sorted_builders),
        [b.name for b in sorted_builders]))

    return sorted_builders

c['prioritizeBuilders'] = prioritizeBuilders

# Style builders
style_builders = [
    ZFSBuilderConfig(
        name="Ubuntu 17.10 x86_64 (STYLE)",
        factory=style_factory,
        slavenames=[slave.slavename for slave in style_slaves],
        tags=style_tags,
        properties=builder_style_properties,
    ),
]

# Distro builders
distro_builders = [
    ZFSBuilderConfig(
        name="Kernel.org Built-in x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in kernel_builtin_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_builtin_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 10 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in debian10_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 7 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in centos7_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in ubuntu16_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 18.04 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in ubuntu18_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="FreeBSD stable/12 amd64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in freebsd12_amd64_slave],
        tags=build_distro_tags,
        properties=builder_freebsd_properties,
    ),
    ZFSBuilderConfig(
        name="FreeBSD head amd64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in freebsd13_amd64_slave],
        tags=build_distro_tags,
        properties=builder_freebsd_properties,
    ),
]

# Architecture builders
arch_builders = [
    ZFSBuilderConfig(
        name="Amazon 2 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in amazon_x86_64_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 i386 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in ubuntu16_i386_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 arm (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_arm_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 aarch64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in ubuntu16_aarch64_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 ppc (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_ppc_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 8 ppc64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.slavename for slave in debian8_ppc64_slave],
        tags=build_arch_tags,
        properties=builder_arch_properties,
    ),
]

# Test builders
test_builders = [
    ZFSBuilderConfig(
        name="Amazon 2 x86_64 Release (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in amazon_x86_64_testslave],
        tags=test_tags,
        properties=builder_nodebug_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 7 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos7_x86_64_testslave],
        tags=test_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="Debian 10 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in debian10_x86_64_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Fedora 30 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in fedora30_x86_64_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 16.04 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu16_x86_64_testslave],
        tags=test_tags,
        properties=builder_dkms_properties,
    ),
    ZFSBuilderConfig(
        name="Ubuntu 18.04 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu18_x86_64_testslave],
        tags=test_tags,
        properties=builder_default_properties,
    ),
    ZFSBuilderConfig(
        name="FreeBSD stable/12 amd64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in freebsd12_amd64_testslave],
        tags=test_tags,
        properties=builder_freebsd_properties,
    ),
    ZFSBuilderConfig(
        name="FreeBSD head amd64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in freebsd13_amd64_testslave],
        tags=test_tags,
        properties=builder_freebsd_properties,
    ),
]

# coverage builders
coverage_builders = [
    ZFSBuilderConfig(
        name="Ubuntu 17.04 x86_64 Coverage (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in ubuntu17_x86_64_coverage_testslave],
        tags=test_tags,
        properties=builder_coverage_properties,
    ),
]

# Performance builders
perf_builders = [
    ZFSBuilderConfig(
        name="Amazon 2 x86_64 (PERF)",
        factory=perf_factory,
        slavenames=[slave.slavename for slave in amazon_x86_64_perfslave],
        tags=perf_tags,
        properties=builder_perf_properties,
    ),
]

# Legacy builders
legacy_builders = [
    ZFSBuilderConfig(
        name="CentOS 6 x86_64 (BUILD)",
        factory=build_factory,
        slavenames=[slave.name for slave in centos6_x86_64_slave],
        tags=build_distro_tags,
        properties=builder_redhat_properties,
    ),
    ZFSBuilderConfig(
        name="CentOS 6 x86_64 (TEST)",
        factory=test_factory,
        slavenames=[slave.name for slave in centos6_x86_64_testslave],
        tags=test_tags,
        properties=builder_redhat_properties,
    ),
]

# All builders
all_builders = \
    style_builders + \
    distro_builders + \
    arch_builders + \
    test_builders + \
    coverage_builders + \
    perf_builders + \
    legacy_builders

c['slaves'] = all_slaves
c['builders'] = all_builders


####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  For this project all notifications occur via
# a Github webhook.  These can be for branch updates or modifications to
# pull requests (open, reopen, synchronize).  A custom pull request handler
# is used to submit changes for every commit which is part of a pull request.

# The 'protocols' setting contains information about protocols which master
# will use for communicating with slaves.
c['protocols'] = {'pb': {'port': bb_slave_port}}



def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.changes import filter

style_builders = [builder.name for builder in style_builders]
distro_builders = [builder.name for builder in distro_builders]
arch_builders = [builder.name for builder in arch_builders]
test_builders = [builder.name for builder in test_builders]
coverage_builders = [builder.name for builder in coverage_builders]
perf_builders = [builder.name for builder in perf_builders]
legacy_builders = [builder.name for builder in legacy_builders]

c['schedulers'] = []

default_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master'},
    'lustre': {'repository': lustre_repo, 'branch': 'b2_11'},
    'spl'   : {'repository': spl_repo, 'branch': 'master'},
    'zfs'   : {'repository': zfs_repo, 'branch': 'master'} }

release_7_codebases = {
    'linux' : {'repository': linux_repo, 'branch': 'master'},
    'lustre': {'repository': lustre_repo, 'branch': 'b2_10'},
    'spl' : {'repository': spl_repo, 'branch': 'spl-0.7-release'},
    'zfs' : {'repository': zfs_repo, 'branch': 'zfs-0.7-release'}}

class CustomSingleBranchScheduler(SingleBranchScheduler):
    spl_pull_request = None
    kernel_pull_request = None
    zfs_branch = None

    def gotChange(self, change, important):
        pattern = '^Requires-spl:\s*([a-zA-Z0-9_\-\.\:\/\+]+)'
        m = re.search(pattern, change.comments, re.I | re.M)
        if m is not None:
            self.spl_pull_request = m.group(1)
        else:
            self.spl_pull_request = None

        pattern = '^Requires-kernel:\s*([a-zA-Z0-9_\-\.\:\/\+\.]+)'
        m = re.search(pattern, change.comments, re.I | re.M)
        if m is not None:
            self.kernel_pull_request = m.group(1)
        else:
            self.kernel_pull_request = None

        if 'branch' in change.properties:
            self.zfs_branch = change.properties['branch']
        else:
            self.zfs_branch = change.branch

        return SingleBranchScheduler.gotChange(self, change, important)

    def getCodebaseDict(self, codebase):
        ss = copy.deepcopy(self.codebases[codebase])
        if codebase == "spl":
            if self.spl_pull_request is not None:
                ss['branch'] = self.spl_pull_request
            elif self.zfs_branch is not None:
                branch_pattern = 'zfs-(.+)'
                m = re.search(branch_pattern, self.zfs_branch, re.I | re.M)
                if m is not None:
                    ss['branch'] = 'spl-%s' % (m.group(1))
        elif codebase == "linux":
            if self.kernel_pull_request is not None:
                ss['branch'] = self.kernel_pull_request
            else:
                tag_override = None
                if os.path.isfile('kernel.tag'):
                    with open('kernel.tag', 'r') as f:
                        tag_override = f.readline()

                if tag_override:
                    ss['branch'] = tag_override.strip()
                    ss['revision'] = None

        return ss

# This is a scheduler to build and test the master branch weekly
c['schedulers'].append(Nightly(
    name="weekly-master-branch-scheduler",
    builderNames=test_builders + perf_builders,
    branch=None,
    codebases=default_codebases,
    dayOfWeek=6, hour=23, minute=00,
    properties={"perfpts": "yes", "perfzts": "yes", "branch": "master"}))

# These schedulers are for pull requests and branch pushes.
c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-style-scheduler",
    builderNames=style_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*style.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-distro-scheduler",
    builderNames=distro_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*(build|distro).*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-build-arch-scheduler",
    builderNames=arch_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*(build|arch).*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-test-scheduler",
    builderNames=test_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*test.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-perf-scheduler",
    builderNames=perf_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*perf.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-legacy-scheduler",
    builderNames=legacy_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*legacy.*")))

c['schedulers'].append(CustomSingleBranchScheduler(
    name="pull-request-coverage-scheduler",
    builderNames=coverage_builders,
    codebases=default_codebases,
    change_filter=filter.ChangeFilter(category_re=".*coverage.*")))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import status, util

authz_cfg=util.Authz(
    auth=util.BasicAuth(web_userpass),
    gracefulShutdown = False,
    pingBuilder = False,
    pauseSlave = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(http_port=bb_web_port,
    order_console_by_time=True, authz=authz_cfg,
    change_hook_dialects={"github" :
        {"secret"   : github_secret,
         "class"    : CustomGitHubEventHandler },
    }))

#
# Used to post builder status updated to Github.
#
repoOwner = util.Interpolate("%(prop:repoowner)s")
repoName = util.Interpolate("%(prop:reponame)s")
sha = util.Interpolate("%(src:zfs:revision)s")
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = status.GitHubStatus(
    token=github_token,
    repoOwner=repoOwner,
    repoName=repoName,
    sha=sha,
    context=context,
    startDescription='Build started.',
    endDescription='Build done.')

c['status'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ZFS on Linux"
c['titleURL'] = zol_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = web_url

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
