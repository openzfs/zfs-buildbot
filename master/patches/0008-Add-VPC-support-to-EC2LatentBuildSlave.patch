From f25e191c22e21039b74eb244b4c900afff251f22 Mon Sep 17 00:00:00 2001
From: Neal Gompa <ngompa@datto.com>
Date: Fri, 30 Mar 2018 17:23:54 -0400
Subject: [PATCH 8/9] Add VPC support to EC2LatentBuildSlave

Partially adapted from 8b67f91b50d72979ff620413dc4169d277b519df in buildbot 0.9.x,
originally authored by Ryan Sydnor <ryan.t.sydnor@gmail.com>.

Tests related to spot instances were not adapted, as there are no spot instance tests
in buildbot 0.8.x to begin with.

Signed-off-by: Neal Gompa <ngompa@datto.com>
---
 master/buildbot/buildslave/ec2.py                | 57 ++++++++++++++----------
 master/buildbot/test/unit/test_buildslave_ec2.py | 46 +++++++++++++++++++
 master/docs/manual/cfg-buildslaves.rst           | 21 +++++++++
 3 files changed, 101 insertions(+), 23 deletions(-)

diff --git a/master/buildbot/buildslave/ec2.py b/master/buildbot/buildslave/ec2.py
index 622bcc973..154c06bd3 100644
--- a/master/buildbot/buildslave/ec2.py
+++ b/master/buildbot/buildslave/ec2.py
@@ -57,6 +57,7 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
                  aws_id_file_path=None, user_data=None, region=None,
                  keypair_name=None,
                  security_name=None,
+                 subnet_id=None, security_group_ids=None,
                  max_builds=None, notify_on_missing=[], missing_timeout=60 * 20,
                  build_wait_timeout=60 * 10, properties={}, locks=None,
                  spot_instance=False, max_spot_price=1.6, volumes=[],
@@ -66,6 +67,10 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
         AbstractLatentBuildSlave.__init__(
             self, name, password, max_builds, notify_on_missing,
             missing_timeout, build_wait_timeout, properties, locks)
+        if security_name and subnet_id:
+            raise ValueError(
+                'security_name (EC2 classic security groups) is not supported '
+                'in a VPC.  Use security_group_ids instead.')
         if not ((ami is not None) ^
                 (valid_ami_owners is not None or
                  valid_ami_location_regex is not None)):
@@ -92,7 +97,7 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
         if keypair_name is None:
             keypair_name = 'latent_buildbot_slave'
             log.msg('Using default keypair name, since none is set')
-        if security_name is None:
+        if security_name is None and not subnet_id:
             security_name = 'latent_buildbot_slave'
             log.msg('Using default keypair name, since none is set')
         self.valid_ami_owners = valid_ami_owners
@@ -181,23 +186,24 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
             self.conn.create_key_pair(keypair_name)
 
         # create security group
-        try:
-            group = self.conn.get_all_security_groups(security_name)[0]
-            assert group
-        except boto.exception.EC2ResponseError, e:
-            if 'InvalidGroup.NotFound' in e.body:
-                self.security_group = self.conn.create_security_group(
-                    security_name,
-                    'Authorization to access the buildbot instance.')
-                # Authorize the master as necessary
-                # TODO this is where we'd open the hole to do the reverse pb
-                # connect to the buildbot
-                # ip = urllib.urlopen(
-                #     'http://checkip.amazonaws.com').read().strip()
-                # self.security_group.authorize('tcp', 22, 22, '%s/32' % ip)
-                # self.security_group.authorize('tcp', 80, 80, '%s/32' % ip)
-            else:
-                raise
+        if security_name:
+            try:
+                group = self.conn.get_all_security_groups(security_name)[0]
+                assert group
+            except boto.exception.EC2ResponseError, e:
+                if 'InvalidGroup.NotFound' in e.body:
+                    self.security_group = self.conn.create_security_group(
+                        security_name,
+                        'Authorization to access the buildbot instance.')
+                    # Authorize the master as necessary
+                    # TODO this is where we'd open the hole to do the reverse pb
+                    # connect to the buildbot
+                    # ip = urllib.urlopen(
+                    #     'http://checkip.amazonaws.com').read().strip()
+                    # self.security_group.authorize('tcp', 22, 22, '%s/32' % ip)
+                    # self.security_group.authorize('tcp', 80, 80, '%s/32' % ip)
+                else:
+                    raise
 
         # get the image
         if self.ami is not None:
@@ -211,6 +217,9 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
         if elastic_ip is not None:
             elastic_ip = self.conn.get_all_addresses([elastic_ip])[0]
         self.elastic_ip = elastic_ip
+        self.subnet_id = subnet_id
+        self.security_group_ids = security_group_ids
+        self.classic_security_groups = [self.security_name] if self.security_name else None
         self.tags = tags
 
     def get_image(self):
@@ -277,9 +286,10 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
     def _start_instance(self):
         image = self.get_image()
         reservation = image.run(
-            key_name=self.keypair_name, security_groups=[self.security_name],
+            key_name=self.keypair_name, security_groups=self.classic_security_groups,
             instance_type=self.instance_type, user_data=self.user_data,
-            placement=self.placement)
+            placement=self.placement, subnet_id=self.subnet_id,
+            security_group_ids=self.security_group_ids)
         self.instance = reservation.instances[0]
         instance_id, image_id, start_time = self._wait_for_instance(
             reservation)
@@ -397,11 +407,12 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
                     (self.__class__.__name__, self.slavename, target_price))
         reservations = self.conn.request_spot_instances(
             target_price, self.ami, key_name=self.keypair_name,
-            security_groups=[
-                self.security_name],
+            security_groups=self.classic_security_groups,
             instance_type=self.instance_type,
             user_data=self.user_data,
-            placement=self.placement)
+            placement=self.placement,
+            subnet_id=self.subnet_id,
+            security_group_ids=self.security_group_ids)
         request = self._wait_for_request(reservations[0])
         instance_id = request.instance_id
         reservations = self.conn.get_all_instances(instance_ids=[instance_id])
diff --git a/master/buildbot/test/unit/test_buildslave_ec2.py b/master/buildbot/test/unit/test_buildslave_ec2.py
index f52fe7d61..b8874dd4f 100644
--- a/master/buildbot/test/unit/test_buildslave_ec2.py
+++ b/master/buildbot/test/unit/test_buildslave_ec2.py
@@ -85,6 +85,52 @@ class TestEC2LatentBuildSlave(unittest.TestCase):
                                      )
         self.assertEqual(bs.tags, tags)
 
+    @mock_ec2
+    def test_fail_mixing_classic_and_vpc_ec2_settings(self):
+        c = self.botoSetup()
+        amis = c.get_all_images()
+
+        def create_slave():
+            ec2.EC2LatentBuildSlave('bot1', 'sekrit', 'm1.large',
+                                    keypair_name="test_key",
+                                    identifier='publickey',
+                                    secret_identifier='privatekey',
+                                    ami=amis[0].id,
+                                    security_name="classic",
+                                    subnet_id="sn-1234"
+                                    )
+
+        self.assertRaises(ValueError, create_worker)
+
+    @mock_ec2
+    def test_start_vpc_instance(self):
+        c = self.botoSetup()
+
+        vpc_conn = boto.connect_vpc()
+        vpc = vpc_conn.create_vpc("192.168.0.0/24")
+        subnet = vpc_conn.create_subnet(vpc.id, "192.168.0.0/24")
+        amis = c.get_all_images()
+
+        sg = c.create_security_group("test_sg", "test_sg", vpc.id)
+        bs = ec2.EC2LatentBuildSlave('bot1', 'sekrit', 'm1.large',
+                                    identifier='publickey',
+                                    secret_identifier='privatekey',
+                                    keypair_name="test_key",
+                                    security_group_ids=[sg.id],
+                                    subnet_id=subnet.id,
+                                    ami=amis[0].id
+                                    )
+
+        instance_id, _, _ = bs._start_instance()
+        instances = [i for i in c.get_only_instances()
+                     if i.state != "terminated"]
+
+        self.assertEqual(len(instances), 1)
+        self.assertEqual(instances[0].id, instance_id)
+        self.assertEqual(instances[0].subnet_id, subnet.id)
+        self.assertEqual(len(instances[0].groups), 1)
+        self.assertEqual(instances[0].groups[0].id, sg.id)
+
     @mock_ec2
     def test_start_instance(self):
         c = self.botoSetup()
diff --git a/master/docs/manual/cfg-buildslaves.rst b/master/docs/manual/cfg-buildslaves.rst
index d8ddd1884..99e23162d 100644
--- a/master/docs/manual/cfg-buildslaves.rst
+++ b/master/docs/manual/cfg-buildslaves.rst
@@ -348,6 +348,27 @@ The ``missing_timeout`` and ``notify_on_missing`` specify how long to wait for a
 ``keypair_name`` and ``security_name`` allow you to specify different names for these AWS EC2 values.
 They both default to ``latent_buildbot_slave``.
 
+VPC Support
+##############
+
+If you are managing slaves within a VPC, your slave configuration must be modified from above.
+You must specify the id of the subnet where you want your slave placed.
+You must also specify security groups created within your VPC as opposed to classic EC2 security groups.
+This can be done by passing the ids of the vpc security groups.
+Note, when using a VPC, you can not specify classic EC2 security groups (as specified by security_name).
+
+::
+
+    from buildbot.plugins import buildslave
+    c['slaves'] = [
+        buildslave.EC2LatentBuildSlave('bot1', 'sekrit', 'm1.large',
+                                       ami='ami-12345',
+                                       keypair_name='latent_buildbot_slave',
+                                       subnet_id='subnet-12345',
+                                       security_group_ids=['sg-12345','sg-67890']
+                                       )
+    ]
+
 Spot instances
 ##############
 
-- 
2.14.3

