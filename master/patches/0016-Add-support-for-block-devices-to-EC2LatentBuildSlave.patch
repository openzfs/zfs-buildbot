From ae680ca8b78c6fbc3fc7ed046f831bb54a922578 Mon Sep 17 00:00:00 2001
From: Neal Gompa <ngompa@datto.com>
Date: Tue, 3 Apr 2018 17:39:52 -0400
Subject: [PATCH 16/18] Add support for block devices to EC2LatentBuildSlave

Partially adapted from 8b67f91b50d72979ff620413dc4169d277b519df in buildbot 0.9.x,
originally authored by Ryan Sydnor <ryan.t.sydnor@gmail.com>.

Signed-off-by: Neal Gompa <ngompa@datto.com>
---
 master/buildbot/buildslave/ec2.py                | 25 ++++++++++++--
 master/buildbot/test/unit/test_buildslave_ec2.py | 42 ++++++++++++++++++++++++
 master/docs/manual/cfg-buildslaves.rst           | 23 +++++++++++++
 3 files changed, 87 insertions(+), 3 deletions(-)

diff --git a/master/buildbot/buildslave/ec2.py b/master/buildbot/buildslave/ec2.py
index dd111e283..bbf5d4b88 100644
--- a/master/buildbot/buildslave/ec2.py
+++ b/master/buildbot/buildslave/ec2.py
@@ -29,6 +29,8 @@ import boto
 import boto.ec2
 import boto.exception
 
+from boto.ec2.blockdevicemapping import BlockDeviceType, BlockDeviceMapping
+
 from twisted.internet import defer
 from twisted.internet import threads
 from twisted.python import log
@@ -68,7 +70,7 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
                  build_wait_timeout=60 * 10, properties={}, locks=None,
                  spot_instance=False, max_spot_price=1.6, volumes=[],
                  placement=None, price_multiplier=1.2, tags={},
-                 delete_vol_term=True, create_volumes=[]):
+                 delete_vol_term=True, create_volumes=[], block_device_map=None):
 
         AbstractLatentBuildSlave.__init__(
             self, name, password, max_builds, notify_on_missing,
@@ -231,6 +233,21 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
         self.security_group_ids = security_group_ids
         self.classic_security_groups = [self.security_name] if self.security_name else None
         self.tags = tags
+        self.block_device_map = self.create_block_device_mapping(block_device_map)
+
+    def create_block_device_mapping(self, mapping_definitions):
+        if not mapping_definitions:
+            return None
+
+        result = BlockDeviceMapping()
+        for device_name, device_properties in mapping_definitions.iteritems():
+            modified_device_properties = dict(device_properties)
+            # Since latent slaves are ephemeral, not leaking volumes on termination
+            # is a much safer default.
+            if 'delete_on_termination' not in modified_device_properties:
+                modified_device_properties['delete_on_termination'] = True
+            result[device_name] = BlockDeviceType(**modified_device_properties)
+        return result
 
     def get_image(self):
         if self.image is not None:
@@ -299,7 +316,8 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
             key_name=self.keypair_name, security_groups=self.classic_security_groups,
             instance_type=self.instance_type, user_data=self.user_data,
             placement=self.placement, subnet_id=self.subnet_id,
-            security_group_ids=self.security_group_ids)
+            security_group_ids=self.security_group_ids,
+            block_device_map=self.block_device_map)
         self.instance = reservation.instances[0]
         instance_id, image_id, start_time = self._wait_for_instance(
             reservation)
@@ -457,7 +475,8 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
             user_data=self.user_data,
             placement=self.placement,
             subnet_id=self.subnet_id,
-            security_group_ids=self.security_group_ids)
+            security_group_ids=self.security_group_ids,
+            block_device_map=self.block_device_map)
         request = self._wait_for_request(reservations[0])
         instance_id = request.instance_id
         reservations = self.conn.get_all_instances(instance_ids=[instance_id])
diff --git a/master/buildbot/test/unit/test_buildslave_ec2.py b/master/buildbot/test/unit/test_buildslave_ec2.py
index b8874dd4f..09b073872 100644
--- a/master/buildbot/test/unit/test_buildslave_ec2.py
+++ b/master/buildbot/test/unit/test_buildslave_ec2.py
@@ -150,6 +150,48 @@ class TestEC2LatentBuildSlave(unittest.TestCase):
         self.assertEqual(instances[0].id, instance_id)
         self.assertEqual(instances[0].tags, {})
 
+    @mock_ec2
+    def test_start_instance_volumes(self):
+        c = self.botoSetup()
+        amis = c.get_all_images()
+        bs = ec2.EC2LatentBuildSlave('bot1', 'sekrit', 'm1.large',
+                                     identifier='publickey',
+                                     secret_identifier='privatekey',
+                                     ami=amis[0].id,
+                                     block_device_map={
+                                         "/dev/xvdb": {
+                                             "volume_type": "io1",
+                                             "iops": 10,
+                                             "size": 20,
+                                         },
+                                         "/dev/xvdc": {
+                                             "volume_type": "gp2",
+                                             "size": 30,
+                                             "delete_on_termination": False
+                                         }
+                                         }
+                                     )
+
+        # moto does not currently map volumes properly.  below ensures
+        # that my conversion code properly composes it, including
+        # delete_on_termination default.
+        from boto.ec2.blockdevicemapping import BlockDeviceType
+        self.assertEqual(set(['/dev/xvdb', '/dev/xvdc']), set(bs.block_device_map.keys()))
+
+        def assertBlockDeviceEqual(a, b):
+            self.assertEqual(a.volume_type, b.volume_type)
+            self.assertEqual(a.iops, b.iops)
+            self.assertEqual(a.size, b.size)
+            self.assertEqual(a.delete_on_termination, b.delete_on_termination)
+
+        assertBlockDeviceEqual(
+            BlockDeviceType(volume_type='io1', iops=10, size=20, delete_on_termination=True),
+            bs.block_device_map['/dev/xvdb'])
+
+        assertBlockDeviceEqual(
+            BlockDeviceType(volume_type='gp2', size=30, delete_on_termination=False),
+            bs.block_device_map['/dev/xvdc'])
+
     @mock_ec2
     def test_start_instance_tags(self):
         c = self.botoSetup()
diff --git a/master/docs/manual/cfg-buildslaves.rst b/master/docs/manual/cfg-buildslaves.rst
index cfc7dbc3d..2ead58acc 100644
--- a/master/docs/manual/cfg-buildslaves.rst
+++ b/master/docs/manual/cfg-buildslaves.rst
@@ -348,6 +348,29 @@ The ``missing_timeout`` and ``notify_on_missing`` specify how long to wait for a
 ``keypair_name`` and ``security_name`` allow you to specify different names for these AWS EC2 values.
 They both default to ``latent_buildbot_slave``.
 
+If you want to attach new ephemeral volumes, use the the block_device_map attribute.
+This follows the BlockDeviceMap configuration of boto almost exactly, essentially acting as a passthrough.
+The only distinction is that the volumes default to deleting on termination to avoid leaking volume resources when slaves are terminated.
+See boto documentation for further details.
+
+::
+
+    from buildbot.plugins import buildslave
+    c['slaves'] = [
+        buildslave.EC2LatentBuildSlave('bot1', 'sekrit', 'm1.large',
+                                       ami='ami-12345',
+                                       block_device_map= {
+                                        "/dev/xvdb" : {
+                                        "volume_type": "io1",
+                                        "iops": 1000,
+                                        "size": 100
+                                       }
+                                      }
+                                      )
+    ]
+
+
+
 VPC Support
 ##############
 
-- 
2.14.3

