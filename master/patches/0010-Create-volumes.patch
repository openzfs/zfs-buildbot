From 07f6a396081626b5aebf52fd2018fd255d61d802 Mon Sep 17 00:00:00 2001
From: Brian Behlendorf <behlendorf1@llnl.gov>
Date: Mon, 7 Mar 2016 14:13:11 -0800
Subject: [PATCH 10/18] Create volumes

---
 master/buildbot/buildslave/ec2.py | 45 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 42 insertions(+), 3 deletions(-)

diff --git a/master/buildbot/buildslave/ec2.py b/master/buildbot/buildslave/ec2.py
index bc7926547..8f83ec3d8 100644
--- a/master/buildbot/buildslave/ec2.py
+++ b/master/buildbot/buildslave/ec2.py
@@ -46,6 +46,12 @@ SPOT_REQUEST_PENDING_STATES = ['pending-evaluation', 'pending-fulfillment']
 FULFILLED = 'fulfilled'
 PRICE_TOO_LOW = 'price-too-low'
 
+VOLUME_CREATING = 'creating'
+VOLUME_AVAILABLE = 'available'
+VOLUME_ISUSE = 'in-use'
+VOLUME_DELETING = 'deleting'
+VOLUME_DELETED = 'deleted'
+VOLUME_ERROR = 'error'
 
 class EC2LatentBuildSlave(AbstractLatentBuildSlave):
 
@@ -64,7 +70,7 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
                  build_wait_timeout=60 * 10, properties={}, locks=None,
                  spot_instance=False, max_spot_price=1.6, volumes=[],
                  placement=None, price_multiplier=1.2, tags={},
-                 delete_vol_term=True, block_device_map=None):
+                 delete_vol_term=True, create_volumes=[],block_device_map=None):
 
         AbstractLatentBuildSlave.__init__(
             self, name, password, max_builds, notify_on_missing,
@@ -113,6 +119,7 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
         self.volumes = volumes
         self.price_multiplier = price_multiplier
         self.delete_vol_term = delete_vol_term
+        self.create_volumes = create_volumes
 
         if None not in [placement, region]:
             self.placement = '%s%s' % (region, placement)
@@ -335,8 +342,8 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
         if self.delete_vol_term is False:
             return
 
-        block_map = self.conn.get_instance_attribute(self.instance.id, attribute='blockDeviceMapping')
-        log.msg("%s: %s" % (self.instance.id, block_map))
+        block_map = self.conn.get_instance_attribute(self.instance.id,
+            attribute='blockDeviceMapping')
 
         del_on_term = []
         for devname in block_map['blockDeviceMapping']:
@@ -347,6 +354,31 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
             if not self.conn.modify_instance_attribute(self.instance.id, 'blockDeviceMapping', del_on_term):
                 log.msg("Failed to set deletion on termination")
 
+    def _create_volumes(self):
+        for device_node, volume_size, region in self.create_volumes:
+            new_vol = self.conn.create_volume(volume_size, region)
+            duration = 0
+            interval = self._poll_resolution
+
+            vol = self.conn.get_all_volumes([new_vol.id])[0]
+            while vol.status not in (VOLUME_AVAILABLE):
+                time.sleep(interval)
+                duration += interval
+                if duration % 60 == 0:
+                    log.msg(
+                        '%s %s has waited %d minutes for volume %s creation' %
+                        (self.__class__.__name__, self.slavename,
+                        duration // 60, new_vol))
+                try:
+                    vol = self.conn.get_all_volumes([new_vol.id])[0]
+                except boto.exception.EC2ResponseError, e:
+                    log.msg('%s %s failed to get all volumes' %
+                        (self.__class__.__name__, self.slavename))
+                    raise
+
+            log.msg('Attaching EBS volume %s to %s.' % (vol.id, device_node))
+            self.conn.attach_volume(vol.id, self.instance.id, device_node)
+
     def _attach_volumes(self):
         for volume_id, device_node in self.volumes:
             self.conn.attach_volume(volume_id, self.instance.id, device_node)
@@ -354,11 +386,18 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
                     (volume_id, device_node))
 
     def _handle_volumes(self):
+        if len(self.create_volumes) > 0:
+            self._create_volumes()
+
         self._handle_delete_on_term()
 
         if len(self.volumes) > 0:
             self._attach_volumes()
 
+        block_map = self.conn.get_instance_attribute(self.instance.id,
+            attribute='blockDeviceMapping')
+        log.msg("%s: blockDeviceMapping=%s" % (self.instance.id, block_map))
+
     def _stop_instance(self, instance, fast):
         if self.elastic_ip is not None:
             self.conn.disassociate_address(self.elastic_ip.public_ip)
-- 
2.13.6

