From fba21596ee6726056c80147861a177816a4c4142 Mon Sep 17 00:00:00 2001
From: Cloud User <ec2-user@ip-172-31-18-165.eu-central-1.compute.internal>
Date: Fri, 1 Jul 2016 17:00:10 +0000
Subject: [PATCH 12/18] Properly handle a stale broker connection on ping

When a slave is pinged, it is possible for the underlying
broker connection to be stale. callRemote in that case, will
raise an exception instead of returning a defer.succeed(False).
Went ahead and added exception handling specifically for the
DeadReferenceError and return defer.succeed(False).
---
 master/buildbot/process/builder.py                 |  3 +++
 master/buildbot/process/buildrequestdistributor.py |  5 +++++
 master/buildbot/process/slavebuilder.py            | 18 ++++++++++++------
 3 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/master/buildbot/process/builder.py b/master/buildbot/process/builder.py
index 2e5df6b35..112b5c105 100644
--- a/master/buildbot/process/builder.py
+++ b/master/buildbot/process/builder.py
@@ -317,6 +317,9 @@ class Builder(config.ReconfigurableServiceMixin,
         build.setBuilder(self)
         log.msg("starting build %s using slave %s" % (build, slavebuilder))
 
+        from pprint import pprint
+        pprint (vars(slavebuilder))
+
         # set up locks
         build.setLocks(self.config.locks)
         cleanups.append(lambda: slavebuilder.slave.releaseLocks())
diff --git a/master/buildbot/process/buildrequestdistributor.py b/master/buildbot/process/buildrequestdistributor.py
index a6d88cee0..eb7229ca6 100644
--- a/master/buildbot/process/buildrequestdistributor.py
+++ b/master/buildbot/process/buildrequestdistributor.py
@@ -275,6 +275,7 @@ class BasicBuildChooser(BuildChooserBase):
         # use 'preferred' slaves first, if we have some ready
         if self.preferredSlaves:
             slave = self.preferredSlaves.pop(0)
+            log.msg("BuildChooser: chose preferred slave %s for build" % (slave.slave.slavename))
             defer.returnValue(slave)
             return
 
@@ -286,22 +287,26 @@ class BasicBuildChooser(BuildChooserBase):
 
             if not slave or slave not in self.slavepool:
                 # bad slave or no slave returned
+                log.msg("BuildChooser: found a bad/no slave")
                 break
 
             self.slavepool.remove(slave)
 
             canStart = yield self.bldr.canStartWithSlavebuilder(slave)
             if canStart:
+                log.msg("BuildChooser: chose slave %s for build" % (slave.slave.slavename))
                 defer.returnValue(slave)
                 return
 
             # save as a last resort, just in case we need them later
             if self.rejectedSlaves is not None:
+                log.msg("BuildChooser: placed slave %s in the rejected list" % (slave.slave.slavename))
                 self.rejectedSlaves.append(slave)
 
         # if we chewed through them all, use as last resort:
         if self.rejectedSlaves:
             slave = self.rejectedSlaves.pop(0)
+            log.msg("BuildChooser: chose rejected slave %s for build" % (slave.slave.slavename))
             defer.returnValue(slave)
             return
 
diff --git a/master/buildbot/process/slavebuilder.py b/master/buildbot/process/slavebuilder.py
index 42f050e5b..0866720a3 100644
--- a/master/buildbot/process/slavebuilder.py
+++ b/master/buildbot/process/slavebuilder.py
@@ -195,12 +195,18 @@ class Ping:
             return defer.succeed(False)
         self.running = True
         log.msg("sending ping")
-        self.d = defer.Deferred()
-        # TODO: add a distinct 'ping' command on the slave.. using 'print'
-        # for this purpose is kind of silly.
-        remote.callRemote("print", "ping").addCallbacks(self._pong,
-                                                        self._ping_failed,
-                                                        errbackArgs=(remote,))
+        try:
+            self.d = defer.Deferred()
+            # TODO: add a distinct 'ping' command on the slave.. using 'print'
+            # for this purpose is kind of silly.
+            remote.callRemote("print", "ping").addCallbacks(self._pong,
+                                                            self._ping_failed,
+                                                            errbackArgs=(remote,))
+        except pb.DeadReferenceError as drerr:
+            log.msg("ping failed: stale broker connection")
+            self.d = None
+            return defer.succeed(False)
+
         return self.d
 
     def _pong(self, res):
-- 
2.13.6

