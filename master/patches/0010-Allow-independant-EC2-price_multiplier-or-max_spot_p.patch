From 8b6f056e6505554c3725f48077c3046ec2375ec3 Mon Sep 17 00:00:00 2001
From: "Christopher J. Morrone" <morrone2@llnl.gov>
Date: Tue, 7 Jun 2016 13:51:41 -0700
Subject: [PATCH 10/18] Allow independant EC2 price_multiplier or
 max_spot_price usage

Change the EC2LatentBuildSlave to allow the use of just one
of either max_spot_price or price_multiplier.  In other words,
either value can be set to None so that only the other value
is used.  When spot instances are used, at least one of those two
parameters must be set.

If only max_spot_price is set, that is the value that is used
as the bid price.  There is not need to look up the historical
bid prices in that case.  It seems likely that in the real world
most people will want to set the maximum price they are willing
to pay.  Artificially bidding lower than one is willing to pay
based on historical information is probably not a very common use
case.

Also, change the logic to use as the bid price the minumum of either
the multiple of the historical average or the max_spot_price.  The
previous behavior was to raise an exception if the multiple was in
excess of the max_spot_price.  That doesn't make much sense.  The
historical average tells us little about the price _now_, so it probably
never makes sense to abort early without at least making an attempt
to substantiate with the max_spot_price.

Fixes #2898 problems 1 and 3.
---
 master/buildbot/buildslave/ec2.py      | 29 ++++++++++++++++-------------
 master/docs/manual/cfg-buildslaves.rst |  5 +++++
 2 files changed, 21 insertions(+), 13 deletions(-)

diff --git a/master/buildbot/buildslave/ec2.py b/master/buildbot/buildslave/ec2.py
index 3c77804f5..1e8442e9e 100644
--- a/master/buildbot/buildslave/ec2.py
+++ b/master/buildbot/buildslave/ec2.py
@@ -95,6 +95,10 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
             else:
                 # verify that regex will compile
                 re.compile(valid_ami_location_regex)
+        if spot_instance and price_multiplier is None and max_spot_price is None:
+            raise ValueError('You must provide either one, or both, of '
+                             'price_multiplier or max_spot_price')
+
         self.valid_ami_owners = valid_ami_owners
         self.valid_ami_location_regex = valid_ami_location_regex
         self.instance_type = instance_type
@@ -416,24 +420,23 @@ class EC2LatentBuildSlave(AbstractLatentBuildSlave):
                 price_sum += price.price
                 price_count += 1
         if price_count == 0:
-            target_price = 0.02
+            bid_price = 0.02
         else:
-            target_price = (price_sum / price_count) * self.price_multiplier
-        return target_price
+            bid_price = (price_sum / price_count) * self.price_multiplier
+        return bid_price
 
     def _request_spot_instance(self):
-        target_price = self._bid_price_from_spot_price_history()
-        if target_price > self.max_spot_price:
-            log.msg('%s %s calculated spot price %0.2f exceeds '
-                    'configured maximum of %0.2f' %
-                    (self.__class__.__name__, self.slavename,
-                     target_price, self.max_spot_price))
-            raise interfaces.LatentBuildSlaveFailedToSubstantiate()
+        if self.price_multiplier is None:
+            bid_price = self.max_spot_price
         else:
-            log.msg('%s %s requesting spot instance with price %0.2f.' %
-                    (self.__class__.__name__, self.slavename, target_price))
+            bid_price = self._bid_price_from_spot_price_history()
+            if self.max_spot_price is not None \
+               and bid_price > self.max_spot_price:
+                bid_price = self.max_spot_price
+        log.msg('%s %s requesting spot instance with price %0.2f.' %
+                (self.__class__.__name__, self.slavename, bid_price))
         reservations = self.conn.request_spot_instances(
-            target_price, self.ami, key_name=self.keypair_name,
+            bid_price, self.ami, key_name=self.keypair_name,
             security_groups=[
                 self.security_name],
             instance_type=self.instance_type,
diff --git a/master/docs/manual/cfg-buildslaves.rst b/master/docs/manual/cfg-buildslaves.rst
index d8ddd1884..ef70c3fb2 100644
--- a/master/docs/manual/cfg-buildslaves.rst
+++ b/master/docs/manual/cfg-buildslaves.rst
@@ -372,6 +372,11 @@ Additionally, you may want to specify ``max_spot_price`` and ``price_multiplier`
 This example would attempt to create a m1.large spot instance in the us-west-2b region costing no more than $0.09/hour.
 The spot prices for that region in the last 24 hours will be averaged and multiplied by the ``price_multiplier`` parameter, then a spot request will be sent to Amazon with the above details.
 If the spot request is rejected, an error message will be logged with the final status.
+If the multiple exceeds the ``max_spot_price``, the bid price will be the ``max_spot_price``.
+
+Either ``max_spot_price`` or ``price_multiplier``, but not both, may be None.
+If ``price_multiplier`` is None, then no historical price information is retrieved; the bid price is simply the specified ``max_spot_price``.
+If the ``max_spot_price`` is None, then the multiple of the historical average spot prices is used as the bid price with no limit.
 
 .. index::
    libvirt
-- 
2.14.3

